[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ClojisR Documentation",
    "section": "",
    "text": "1 Preface\nClojure speaks statistics - a jisr between Clojure and R\nArtifact:\nSource:\nStatus: still evolving; have been tested and used for few years",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "index.html#existing-chapters-in-this-book",
    "href": "index.html#existing-chapters-in-this-book",
    "title": "ClojisR Documentation",
    "section": "1.1 Existing chapters in this book:",
    "text": "1.1 Existing chapters in this book:\n\nClojisr tutorial\nR code generation from Clojure forms\nDataset transfer from R to Clojure\nClojisR example: Titanic #0\n\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html",
    "href": "clojisr.v1.tutorials.main.html",
    "title": "2  Clojisr tutorial",
    "section": "",
    "text": "2.1 Setup",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#setup",
    "href": "clojisr.v1.tutorials.main.html#setup",
    "title": "2  Clojisr tutorial",
    "section": "",
    "text": "(ns clojisr.v1.tutorials.main\n  (:require [clojisr.v1.r :as r :refer [r eval-r-&gt;java r-&gt;java java-&gt;r java-&gt;clj java-&gt;native-clj clj-&gt;java r-&gt;clj clj-&gt;r -&gt;code r+ colon require-r]]\n            [clojisr.v1.robject :as robject]\n            [clojisr.v1.session :as session]\n            [tech.v3.dataset :as dataset]\n            [scicloj.kindly.v4.kind :as kind]\n            [scicloj.kindly.v4.api :as kindly]))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#basic-examples",
    "href": "clojisr.v1.tutorials.main.html#basic-examples",
    "title": "2  Clojisr tutorial",
    "section": "2.2 Basic examples",
    "text": "2.2 Basic examples\nLet us start by some basic usage examples of Clojisr.\nFirst, let us make sure that we use the Rserve backend (in case we were using another engine instead earlier), and that there are no R sessions currently running. This is typically not needed if you just started working. Here, we do it just in case.\n\n(r/set-default-session-type! :rserve)\n\n\n{:session-type :rserve}\n\n\n(r/discard-all-sessions)\n\n\n{}\n\nNow let us run some R code, and keep a Clojure handle to the return value.\n\n(def x (r \"1+2\"))\n\nThe thing we created is something called an ROBject.\n\n(class x)\n\n\nclojisr.v1.robject.RObject\n\nIf we wish, we can convert an ROBject to Clojure:\n\n(r-&gt;clj x)\n\n\n[3.0]\n\nLet us see more examples of creating ROBjects and converting them to Clojure:\n\n(-&gt;&gt; \"list(A=1,B=2,'#123strange&lt;text&gt; ()'=3)\"\n     r\n     r-&gt;clj)\n\n\n{:A [1.0], :B [2.0], \"#123strange&lt;text&gt; ()\" [3.0]}\n\nIn the other direction, we can convert Clojure data to R data. Note that nil is turned to NA.\n\n(-&gt; [1 nil 3]\n    clj-&gt;r)\n\n\n[1]  1 NA  3\n\n\nWe can run code on a separate R session (specify session-args which are different than the default ones).\n\n(-&gt; \"1+2\"\n    (r :session-args {:session-name \"mysession\"})\n    r-&gt;clj)\n\n\n[3.0]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#functions",
    "href": "clojisr.v1.tutorials.main.html#functions",
    "title": "2  Clojisr tutorial",
    "section": "2.3 Functions",
    "text": "2.3 Functions\nAn R function is also a Clojure function.\n\n(def f (r \"function(x) x*10\"))\n\nLet us apply it to Clojure data (implicitly converting that data to R).\n\n(-&gt; 5\n    f\n    r-&gt;clj)\n\n\n[50.0]\n\nWe can also apply it to R data.\n\n(-&gt; \"5*5\"\n    r\n    f\n    r-&gt;clj)\n\n\n[250.0]\n\nFunctions can get named arguments. Here we pass the na.rm argument, that tells R whether to remove missing values whenn computing the mean.\n\n(r-&gt;clj ((r \"mean\")\n         [1 nil 3]\n         :na.rm true))\n\n\n[2.0]\n\nAnother example:\n\n(let [f (r \"function(w,x,y=10,z=20) w+x+y+z\")]\n  (-&gt;&gt; [(f 1 2)\n        (f 1 2 :y 100)\n        (f 1 2 :z 100)]\n       (map r-&gt;clj)))\n\n\n([33.0] [123.0] [113.0])\n\nSome functions are already created in Clojisr and given special names for convenience. Here are some examples:\nR addition:\n\n(-&gt;&gt; (r+ 1 2 3)\n     r-&gt;clj)\n\n\n[6]\n\nR colon (:), for creating a range of integers, like 0:9:\n\n(r-&gt;clj (colon 0 9))\n\n\n[0 1 2 3 4 5 6 7 8 9]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#r-dataframes-and-tech.ml.dataset-datasets",
    "href": "clojisr.v1.tutorials.main.html#r-dataframes-and-tech.ml.dataset-datasets",
    "title": "2  Clojisr tutorial",
    "section": "2.4 R dataframes and tech.ml.dataset datasets",
    "text": "2.4 R dataframes and tech.ml.dataset datasets\nAt Clojure, we have a structure that is equivalent to R dataframes: a tech.ml.dataset dataset.\nLet us create such a dataset, pass it to an R function to compute the row means, and then convert the return value back to Clojure.\n\n(let [row-means (r \"function(data) rowMeans(data)\")]\n  (-&gt; {:x [1 2 3]\n       :y [4 5 6]}\n      dataset/-&gt;dataset\n      row-means\n      r-&gt;clj))\n\n\n[2.5 3.5 4.5]\n\nLet us see some more dataset proccessing through R.\nLoading the R package dplyr (assuming it is installed).\n\n(r \"library(dplyr)\")\n\n\n[1] \"dplyr\"     \"Rserve\"    \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n\nUsing dplyr to process some Clojure dataset, and convert back to the resulting dataset.\n\n(let [filter-by-x  (r \"function(data) filter(data, x&gt;=2)\")\n      add-z-column (r \"function(data) mutate(data, z=x+y)\")]\n  (-&gt; {:x [1 2 3]\n       :y [4 5 6]}\n      dataset/-&gt;dataset\n      filter-by-x\n      add-z-column\n      r-&gt;clj))\n\n\n_unnamed [2 3]:\n\n\n\n:x\n:y\n:z\n\n\n\n\n2\n5\n7\n\n\n3\n6\n9\n\n\n\n\nTibbles, which are a more recent R dataframe notion, are also supported, as a special case of data frames.\n\n(r \"library(tibble)\")\n\n\n [1] \"tibble\"    \"dplyr\"     \"Rserve\"    \"stats\"     \"graphics\"  \"grDevices\"\n [7] \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\n\n\n(let [tibble (r \"tibble\")]\n  (tibble\n   :x [1 2 3]\n   :y [4 5 6]))\n\n\n# A tibble: 3 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     1     4\n2     2     5\n3     3     6\n\n\n\n(let [tibble (r \"tibble\")]\n  (-&gt; (tibble\n       :x [1 2 3]\n       :y [4 5 6])\n      r-&gt;clj\n      dataset/mapseq-reader))\n\n\n[{:x 1, :y 4} {:x 2, :y 5} {:x 3, :y 6}]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#r-objects",
    "href": "clojisr.v1.tutorials.main.html#r-objects",
    "title": "2  Clojisr tutorial",
    "section": "2.5 R objects",
    "text": "2.5 R objects\nClojisr holds handles to R objects, that are stored in memory at the R session, where they are assigned random names.\n\n(def one+two (r \"1+2\"))\n\n\n(class one+two)\n\n\nclojisr.v1.robject.RObject\n\nThe name of an object is the place where it is held at R (inside an R evnironment called .MEM).\n\n(:object-name one+two)\n\n\n\".MEM$xcc9c677e02ae4da3\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#generating-code",
    "href": "clojisr.v1.tutorials.main.html#generating-code",
    "title": "2  Clojisr tutorial",
    "section": "2.6 Generating code",
    "text": "2.6 Generating code\nLet us see the mechanism by which clojisr generates R code, and the rules defining it.\nSince we are playing a bit with the internals here, we will need a reference to the R session:\n\n(def session\n  (session/fetch-or-make nil))\n\nFor the following examples, we will use some dummy handles to R objects with given names:\n\n(def x (robject/-&gt;RObject \"robject_x\" session nil nil))\n\n\n(def y (robject/-&gt;RObject \"robject_y\" session nil nil))\n\n.. and some real handles to R objects:\n\n(def minus-eleven (r \"-11\"))\n\n\n(def abs (r \"abs\"))\n\nThe function -&gt;code generates R code according to a certain set of rules. Here we describe some of these rules briefly. We also wrote a dedicated tutorial about the rule set more thoroughly.\nFor an ROBject, the generated code is just the ROBject name.\n\n(-&gt;code x)\n\n\n\"robject_x\"\n\nFor a clojure value, we use some form analysis and generate proper R string or values.\n\n(-&gt;code \"hello\")\n\n\n\"\\\"hello\\\"\"\n\n\n(-&gt;code [1 2 3])\n\n\n\"c(1L,2L,3L)\"\n\nFor a symbol, we generate the code with the corresponding R symbol.\n\n(-&gt;code 'x)\n\n\n\"x\"\n\nA sequential structure (list, vector, etc.) can be interpreted as a compound expression, for which code generation is defined accorting to the first list element.\nFor a list beginning with the symbol 'function, we generate an R function definition.\n\n(-&gt;code '(function [x y] x))\n\n\n\"function(x,y) {x}\"\n\nFor a vector instead of list, we create R vector.\n\n(-&gt;code '[function [x y] x])\n\n\n\"c(function,c(x,y),x)\"\n\nFor a list beginning with the symbol 'formula, we generate an R ~-formula.\n\n(-&gt;code '(formula x y))\n\n\n\"(x~y)\"\n\nFor a list beginning with a symbol known to be a binary operator, we generate nested calls.\n\n(-&gt;code '(+ x y z))\n\n\n\"((x+y)+z)\"\n\nFor a list beginning with another symbol, we generate a function call with that symbol as the function name.\n\n(-&gt;code '(f x))\n\n\n\"f(x)\"\n\nFor a list beginning with an R object that is a function, we generate a function call with that object as the function. If you create the list using the quote sign ('), don’t forget to unquote symbols refering to things you defined on the Clojure side.\n\n(-&gt;code '(~abs x))\n\n\n\".MEM$x12b17e103f894d6e(x)\"\n\nAll other sequential things (that is, those not beginning with a symbol or R function) are intepreted as data, converted implicitly R data representation.\n\n(-&gt;code `(~abs (1 2 3)))\n\n\n\".MEM$x12b17e103f894d6e(c(1L,2L,3L))\"\n\nSome more examples, showing how these rules compose:\n\n(-&gt;code '(function [x y] (f y)))\n\n\n\"function(x,y) {f(y)}\"\n\n\n(-&gt;code '(function [x y] (f ~y)))\n\n\n\"function(x,y) {f(robject_y)}\"\n\n\n(-&gt;code '(function [x y] (+ x y)))\n\n\n\"function(x,y) {(x+y)}\"\n\n\n(-&gt;code (list 'function '[x y] (list '+ 'x 'y)))\n\n\n\"function(x,y) {(x+y)}\"\n\n\n(-&gt;code '(function [x y] (print x) (f x)))\n\n\n\"function(x,y) {print(x);f(x)}\"\n\n\n(-&gt;code '(function [x y] (~abs x)))\n\n\n\"function(x,y) {.MEM$x12b17e103f894d6e(x)}\"\n\n\n(-&gt;code '(~abs ~minus-eleven))\n\n\n\".MEM$x12b17e103f894d6e(.MEM$x02374ec85cb348ae)\"\n\n\n(-&gt;code '(~abs -11))\n\n\n\".MEM$x12b17e103f894d6e(-11L)\"\n\nUse syntax quote ` in case you want to use local bindings.\n\n(let [minus-ten -10]\n  (-&gt;code `(~abs ~minus-ten)))\n\n\n\".MEM$x12b17e103f894d6e(-10L)\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#running-generated-code",
    "href": "clojisr.v1.tutorials.main.html#running-generated-code",
    "title": "2  Clojisr tutorial",
    "section": "2.7 Running generated code",
    "text": "2.7 Running generated code\nClojure forms can be run as R code. Behind the scences, they are turned to R code using the -&gt;code function described above. For example:\n\n(-&gt; '(~abs ~(range -3 0))\n    r\n    r-&gt;clj)\n\n\n[3 2 1]\n\nOr, equivalently:\n\n(-&gt; '(~abs ~(range -3 0))\n    -&gt;code\n    r\n    r-&gt;clj)\n\n\n[3 2 1]\n\nLet us repeat the basic examples from the beginning of this tutorial, this time generating code rather than writing it as Strings.\n\n(def x (r '(+ 1 2)))\n\n\n(r-&gt;clj x)\n\n\n[3]\n\n\n(def f (r '(function [x] (* x 10))))\n\n\n(-&gt; 5\n    f\n    r-&gt;clj)\n\n\n[50]\n\n\n(-&gt; \"5*5\"\n    r\n    f\n    r-&gt;clj)\n\n\n[250.0]\n\n\n(let [row-means (r '(function [data] (rowMeans data)))]\n  (-&gt; {:x [1 2 3]\n       :y [4 5 6]}\n      dataset/-&gt;dataset\n      row-means\n      r-&gt;clj))\n\n\n[2.5 3.5 4.5]\n\n\n(r '(library dplyr))\n\n\n [1] \"tibble\"    \"dplyr\"     \"Rserve\"    \"stats\"     \"graphics\"  \"grDevices\"\n [7] \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\n\n\n(let [filter-by-x  (r '(function [data] (filter data (&gt;= x 2))))\n      add-z-column (r '(function [data] (mutate data (= z (+ x y)))))]\n  (-&gt;&gt; {:x [1 2 3]\n        :y [4 5 6]}\n       dataset/-&gt;dataset\n       filter-by-x\n       add-z-column\n       r-&gt;clj))\n\n\n_unnamed [2 3]:\n\n\n\n:x\n:y\n:z\n\n\n\n\n2\n5\n7\n\n\n3\n6\n9",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#requiring-r-packages",
    "href": "clojisr.v1.tutorials.main.html#requiring-r-packages",
    "title": "2  Clojisr tutorial",
    "section": "2.8 Requiring R packages",
    "text": "2.8 Requiring R packages\nSometimes, we want to bring to the Clojure world functions and data from R packages. Here, we try to follow the require-python syntax of libpython-clj (though currently in a less sophisticated way.)\n\n(require-r '[stats :as statz :refer [median]])\n\n\nnil\n\n\n(-&gt; [1 2 3]\n    r.stats/median\n    r-&gt;clj\n    )\n\n\n[2]\n\n\n(-&gt; [1 2 3]\n    statz/median\n    r-&gt;clj)\n\n\n[2]\n\n\n(-&gt; [1 2 3]\n    median\n    r-&gt;clj)\n\n\n[2]\n\n\n(require-r '[datasets :as datasetz :refer [euro]])\n\n\nnil\n\n\n[r.datasets/euro\n datasetz/euro\n euro]\n\n\n[        ATS         BEF         DEM         ESP         FIM         FRF \n  13.760300   40.339900    1.955830  166.386000    5.945730    6.559570 \n        IEP         ITL         LUF         NLG         PTE \n   0.787564 1936.270000   40.339900    2.203710  200.482000 \n\n         ATS         BEF         DEM         ESP         FIM         FRF \n  13.760300   40.339900    1.955830  166.386000    5.945730    6.559570 \n        IEP         ITL         LUF         NLG         PTE \n   0.787564 1936.270000   40.339900    2.203710  200.482000 \n\n         ATS         BEF         DEM         ESP         FIM         FRF \n  13.760300   40.339900    1.955830  166.386000    5.945730    6.559570 \n        IEP         ITL         LUF         NLG         PTE \n   0.787564 1936.270000   40.339900    2.203710  200.482000 \n]\n\n\n(require-r '[base :refer [$]])\n\n\nnil\n\n\n(-&gt; {:a 1 :b 2}\n    ($ 'a)\n    r-&gt;clj)\n\n\n[1]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#data-visualization",
    "href": "clojisr.v1.tutorials.main.html#data-visualization",
    "title": "2  Clojisr tutorial",
    "section": "2.9 Data visualization",
    "text": "2.9 Data visualization\nFunctions creating R plots or any plotting objects generated by various R libraries can be wrapped in a way that returns an SVG, BufferedImage or can be saved to a file. All of them accept additional parameters specified in grDevices R package.\nCurrently there is a bug that sometimes causes axes and labels to disappear when rendered inside a larger HTML.\n\n(require-r '[graphics :refer [plot hist]])\n\n\nnil\n\n\n(require-r '[ggplot2 :refer [ggplot aes geom_point xlab ylab labs]])\n\n\nnil\n\n\n(require '[clojisr.v1.applications.plotting :refer [plot-&gt;svg plot-&gt;file plot-&gt;buffered-image]])\n\nFirst example, simple plotting function as SVG string.\n\n(plot-&gt;svg\n (fn []\n   (-&gt;&gt; rand\n        (repeatedly 30)\n        (reductions +)\n        (plot :xlab \"t\"\n              :ylab \"y\"\n              :type \"l\"))))\n\n\n\n\n  \n\n\n\n  \n    \n  \n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n5\n10\n15\n20\n25\n30\n\n\n\n\n\n0\n5\n10\n15\n\nt\ny\n\n\n\nggplot2 plots (or any other plot objects like lattice) can be also turned into SVG.\n\n(plot-&gt;svg\n (let [x (repeatedly 99 rand)\n       y (map +\n              x\n              (repeatedly 99 rand))]\n   (-&gt; {:x x :y y}\n       dataset/-&gt;dataset\n       (ggplot (aes :x x\n                    :y y\n                    :color '(+ x y)\n                    :size '(/ x y)))\n       (r+ (geom_point)\n           (xlab \"x\")\n           (ylab \"y\")))))\n\n\n\n\n  \n\n\n\n  \n    \n  \n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.0\n0.5\n1.0\n1.5\n\n\n\n\n\n\n\n\n\n0.00\n0.25\n0.50\n0.75\n1.00\nx\ny\n\n(x/y)\n\n\n\n\n\n\n0.25\n0.50\n0.75\n\n\n1\n2\n(x + y)\n\n\n\n\n\n\n\nAny plot (function or object) can be saved to file or converted to BufferedImage object.\n\n(let [path \"/tmp/histogram.jpg\"]\n  (r-&gt;clj (plot-&gt;file path\n                      (fn [] (hist [1 1 1 1 2 3 4 5]\n                                   :main \"Histogram\"\n                                   :xlab \"data: [1 1 1 1 2 3 4 5]\"))\n                      :width 800 :height 400 :quality 50))\n  (-&gt; (clojure.java.shell/sh \"ls\" path)\n      :out\n      kind/code))\n\n\n/tmp/histogram.jpg\n\n\n(plot-&gt;buffered-image (fn [] (hist [1 1 1 1 2 3 4 5])) :width 222 :height 149)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#intermediary-representation-as-java-objects.",
    "href": "clojisr.v1.tutorials.main.html#intermediary-representation-as-java-objects.",
    "title": "2  Clojisr tutorial",
    "section": "2.10 Intermediary representation as Java objects.",
    "text": "2.10 Intermediary representation as Java objects.\nClojisr relies on the fact of an intemediary representation of java, as Java objects. This is usually hidden from the user, but may be useful sometimes. In the current implementation, this is based on REngine.\n\n(import (org.rosuda.REngine REXP REXPInteger REXPDouble))\n\n\norg.rosuda.REngine.REXPDouble\n\nWe can convert data between R and Java.\n\n(-&gt; \"1:9\"\n    r\n    r-&gt;java\n    class)\n\n\norg.rosuda.REngine.REXPInteger\n\n\n(-&gt; (REXPInteger. 1)\n    java-&gt;r\n    r-&gt;clj)\n\n\n[1]\n\nWe can further convert data from the java representation to Clojure.\n\n(-&gt; \"1:9\"\n    r\n    r-&gt;java\n    java-&gt;clj)\n\n\n[1 2 3 4 5 6 7 8 9]\n\nOn the opposite direction, we can also convert Clojure data into the Java represenattion.\n\n(-&gt; (range 1 10)\n    clj-&gt;java\n    class)\n\n\norg.rosuda.REngine.REXPInteger\n\n\n(-&gt; (range 1 10)\n    clj-&gt;java\n    java-&gt;clj)\n\n\n[1 2 3 4 5 6 7 8 9]\n\nThere is an alternative way of conversion from Java to Clojure, naively converting the internal Java representation to a Clojure data structure. It can be handy when one wants to have plain access to all the metadata (R attributes), etc.\n\n(-&gt;&gt; \"1:9\"\n     r\n     r-&gt;java\n     java-&gt;native-clj)\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n(-&gt;&gt; \"data.frame(x=1:3,y=factor('a','a','b'))\"\n     r\n     r-&gt;java\n     java-&gt;native-clj)\n\n\n{:x [1, 2, 3], :y [1, 1, 1]}\n\nWe can evaluate R code and immediately return the result as a java object, without ever creating a handle to an R object holding the result:\n\n(-&gt; \"1+2\"\n    eval-r-&gt;java\n    class)\n\n\norg.rosuda.REngine.REXPDouble\n\n\n(-&gt; \"1+2\"\n    eval-r-&gt;java\n    (.asDoubles)\n    vec)\n\n\n[3.0]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#more-data-conversion-examples",
    "href": "clojisr.v1.tutorials.main.html#more-data-conversion-examples",
    "title": "2  Clojisr tutorial",
    "section": "2.11 More data conversion examples",
    "text": "2.11 More data conversion examples\nConvertion between R and Clojure always passes through Java. To stress this, we write it explicitly in the following examples.\n\n(-&gt; \"list(a=1:2,b='hi!')\"\n    r\n    r-&gt;java\n    java-&gt;clj)\n\n\n{:a [1 2], :b [\"hi!\"]}\n\nPartially named lists are also supported\n\n(-&gt; \"list(a=1:2,'hi!')\"\n    r\n    r-&gt;java\n    java-&gt;clj)\n\n\n{:a [1 2], 1 [\"hi!\"]}\n\n\n(-&gt; \"table(c('a','b','a','b','a','b','a','b'), c(1,1,2,2,3,3,1,1))\"\n    r\n    r-&gt;java\n    java-&gt;clj\n    dataset/mapseq-reader\n    set)\n\n\n#{{0 \"a\", 1 \"2\", :$value 2}\n  {0 \"b\", 1 \"3\", :$value 1}\n  {0 \"a\", 1 \"1\", :$value 2}\n  {0 \"a\", 1 \"3\", :$value 1}\n  {0 \"b\", 1 \"2\", :$value 1}\n  {0 \"b\", 1 \"1\", :$value 1}}\n\n\n(-&gt; {:a [1 2] :b \"hi!\"}\n    clj-&gt;java\n    java-&gt;r\n    r-&gt;java\n    java-&gt;clj)\n\n\n{:a [1 2], :b [\"hi!\"]}\n\n\n(-&gt;&gt; {:a [1 2] :b \"hi!\"}\n     clj-&gt;java\n     java-&gt;r\n     ((r \"deparse\"))\n     r-&gt;java\n     java-&gt;clj)\n\n\n[\"list(a = 1:2, b = \\\"hi!\\\")\"]\n\n\n2.11.1 Basic types convertion clj-&gt;r-&gt;clj\n\n(def clj-&gt;r-&gt;clj (comp r-&gt;clj r))\n\n\n(clj-&gt;r-&gt;clj nil)\n\n\nnil\n\n\n(clj-&gt;r-&gt;clj [10 11])\n\n\n[10 11]\n\n\n(clj-&gt;r-&gt;clj [10.0 11.0])\n\n\n[10.0 11.0]\n\n\n(clj-&gt;r-&gt;clj (list 10.0 11.0))\n\n\n[10.0 11.0]\n\n\n(clj-&gt;r-&gt;clj {:a 1 :b 2})\n\n\n{:a [1], :b [2]}\n\n\n\n2.11.2 Various R objects\nNamed list\n\n(-&gt; \"list(a=1L,b=c(10,20),c='hi!')\"\n    r\n    r-&gt;clj)\n\n\n{:a [1], :b [10.0 20.0], :c [\"hi!\"]}\n\nArray of doubles\n\n(-&gt; \"c(10,20,30)\"\n    r\n    r-&gt;clj)\n\n\n[10.0 20.0 30.0]\n\nArray of longs\n\n(-&gt; \"c(10L,20L,30L)\"\n    r\n    r-&gt;clj)\n\n\n[10 20 30]\n\nTimeseries\n\n(-&gt; 'euro\n    r\n    r-&gt;clj\n    first)\n\n\n13.7603\n\nPairlist\n\n(-&gt; r.stats/dnorm\n    r.base/formals\n    r-&gt;clj\n    keys\n    sort)\n\n\n(:log :mean :sd :x)\n\nNULL\n\n(-&gt; \"NULL\"\n    r\n    r-&gt;clj)\n\n\nnil\n\nTRUE/FALSE\n\n(-&gt; \"TRUE\"\n    r\n    r-&gt;clj)\n\n\n[true]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#inspecting-r-functions",
    "href": "clojisr.v1.tutorials.main.html#inspecting-r-functions",
    "title": "2  Clojisr tutorial",
    "section": "2.12 Inspecting R functions",
    "text": "2.12 Inspecting R functions\nThe mean function is defined to expect arguments x and .... These arguments have no default values (thus, its formals have empty symbols as values):\n\n(-&gt; 'mean\n    r.base/formals\n    r-&gt;clj)\n\n\n{:x , :... }\n\nIt is an S3 generic function function, which we can realize by printing it:\n\n(r 'mean)\n\n\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x601cd0aa27a0&gt;\n&lt;environment: namespace:base&gt;\n\n\nSo, we can expect possibly more details when inspecting its default implementation. Now, we see some arguments that do have default values.\n\n(-&gt; 'mean.default\n    r.base/formals\n    r-&gt;clj)\n\n\n{:x , :trim [0.0], :na.rm [false], :... }",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.main.html#r-function-arglists",
    "href": "clojisr.v1.tutorials.main.html#r-function-arglists",
    "title": "2  Clojisr tutorial",
    "section": "2.13 R-function-arglists",
    "text": "2.13 R-function-arglists\nAs we saw earlier, R functions are Clojure functions. The arglists of functions brought up by require-r match the expected arguments. Here are some examples:\n\n(require-r\n '[base]\n '[stats]\n '[grDevices])\n\n\nnil\n\n\n(-&gt;&gt; [#'r.base/mean, #'r.base/mean-default, #'r.stats/arima0,\n      #'r.grDevices/dev-off, #'r.base/Sys-info, #'r.base/summary-default\n      ;; Primitive functions:\n      #'r.base/sin, #'r.base/sum]\n     (map (fn [f]\n            (-&gt; f\n                meta\n                (update :ns (comp symbol str))))))\n\n\n({:arglists ([x & {:keys [...]}]), :name mean, :ns r.base}\n {:arglists ([x & {:keys [trim na.rm ...]}]),\n  :name mean-default,\n  :ns r.base}\n {:arglists\n  ([x\n    &\n    {:keys\n     [order\n      seasonal\n      xreg\n      include.mean\n      delta\n      transform.pars\n      fixed\n      init\n      method\n      n.cond\n      optim.control]}]),\n  :name arima0,\n  :ns r.stats}\n {:arglists ([& {:keys [which]}]), :name dev-off, :ns r.grDevices}\n {:arglists ([]), :name Sys-info, :ns r.base}\n {:arglists ([object & {:keys [... digits quantile.type]}]),\n  :name summary-default,\n  :ns r.base}\n {:arglists ([x]), :name sin, :ns r.base}\n {:arglists ([& {:keys [... na.rm]}]), :name sum, :ns r.base})\n\n\nsource: notebooks/clojisr/v1/tutorials/main.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Clojisr tutorial</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.codegen.html",
    "href": "clojisr.v1.tutorials.codegen.html",
    "title": "3  R code generation from Clojure forms",
    "section": "",
    "text": "3.1 R code as a string\nTo run any R code as string or Clojure form we use clojisr.v1.r/r function\nAs mentioned above, every r call creates RObject and R variable which keeps result of the execution.\nLet’s use the var name string to see what it represents.\nNow let us move to discussing the ROBject data type.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R code generation from Clojure forms</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.codegen.html#r-code-as-a-string",
    "href": "clojisr.v1.tutorials.codegen.html#r-code-as-a-string",
    "title": "3  R code generation from Clojure forms",
    "section": "",
    "text": "(r \"mean(rnorm(100000,mean=1.0,sd=3.0))\")\n\n\n[1] 0.9959418\n\n\n\n(r \"abc &lt;- runif(1000);\n          f &lt;- function(x) {mean(log(x))};\n          f(abc)\")\n\n\n[1] -0.9456044\n\n\n\n\n(def result (r \"rnorm(10)\"))\n\n\n(class result)\n\n\nclojisr.v1.robject.RObject\n\n\n(:object-name result)\n\n\n\".MEM$x477bd5ac95d34ce2\"\n\n\n\n(r (:object-name result))\n\n\n [1]  0.5215020 -1.2834024  0.7293501 -1.4119112  0.6485824  1.8397164\n [7] -0.9310476  1.1575124 -2.4061336 -0.6244351",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R code generation from Clojure forms</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.codegen.html#robject",
    "href": "clojisr.v1.tutorials.codegen.html#robject",
    "title": "3  R code generation from Clojure forms",
    "section": "3.2 RObject",
    "text": "3.2 RObject\nEvery RObject acts as Clojure reference to an R variable. All these variables are held in an R environment called .MEM. An RObject can represent anything and can be used for further evaluation, even acting as a function if it corresponds to an R function. Here are some examples:\nAn r-object holding some R data:\n\n(def dataset (r \"nhtemp\"))\n\nAn r-object holding an R function:\n\n(def function (r \"mean\"))\n\nPrinting the data:\n\ndataset\n\n\nTime Series:\nStart = 1912 \nEnd = 1971 \nFrequency = 1 \n [1] 49.9 52.3 49.4 51.1 49.4 47.9 49.8 50.9 49.3 51.9 50.8 49.6 49.3 50.6 48.4\n[16] 50.7 50.9 50.6 51.5 52.8 51.8 51.1 49.8 50.2 50.4 51.6 51.8 50.9 48.8 51.7\n[31] 51.0 50.6 51.7 51.5 52.1 51.3 51.0 54.0 51.4 52.7 53.1 54.6 52.0 52.0 50.9\n[46] 52.6 50.2 52.6 51.6 51.9 50.5 50.9 51.7 51.4 51.7 50.8 51.9 51.8 51.9 53.0\n\n\nEquivalently:\n\n(r dataset)\n\n\nTime Series:\nStart = 1912 \nEnd = 1971 \nFrequency = 1 \n [1] 49.9 52.3 49.4 51.1 49.4 47.9 49.8 50.9 49.3 51.9 50.8 49.6 49.3 50.6 48.4\n[16] 50.7 50.9 50.6 51.5 52.8 51.8 51.1 49.8 50.2 50.4 51.6 51.8 50.9 48.8 51.7\n[31] 51.0 50.6 51.7 51.5 52.1 51.3 51.0 54.0 51.4 52.7 53.1 54.6 52.0 52.0 50.9\n[46] 52.6 50.2 52.6 51.6 51.9 50.5 50.9 51.7 51.4 51.7 50.8 51.9 51.8 51.9 53.0\n\n\nWe use r-&gt;clj to transfer data from R to Clojure (converting an R object to Clojure data):\n\n(-&gt; (r-&gt;clj dataset)\n    (dataset/select-rows 0)\n    (dataset/mapseq-reader))\n\n\n[{:$time 1912.0, :$series 49.9}]\n\nCreating an R object, applying the function to it, and conveting to Clojure data (in this pipeline, both function and r return an RObject):\n\n(-&gt; \"c(1,2,3,4,5,6)\"\n    r\n    function\n    r-&gt;clj)\n\n\n[3.5]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R code generation from Clojure forms</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.codegen.html#clojure-forms",
    "href": "clojisr.v1.tutorials.codegen.html#clojure-forms",
    "title": "3  R code generation from Clojure forms",
    "section": "3.3 Clojure forms",
    "text": "3.3 Clojure forms\nCalling R with the code as a string is quite limited. You can’t easily inject Clojure data into the code. Also, editor support is very limited for this way of writing. So we enable the use of Clojure forms as a DSL to simplify the construnction of R code.\nIn generating R code from Clojure forms, clojisr operates on both the var and the symbol level, and can also digest primitive types and basic data structures. There are some special symbols which help in creating R formulas and defining R functions. We will go through all of these in detail.\nThe -&gt;code function is responsible for turning Clojure forms into R code.\n\n(-&gt;code [1 2 4])\n\n\n\"c(1L,2L,4L)\"\n\nWhen the r function gets an argument that is not a string, it uses -&gt;code behind the scenes to turn that argument into code as a string.\n\n(r [1 2 4])\n\n\n[1] 1 2 4\n\n\n\n(-&gt; [1 2 4]\n    r\n    r-&gt;clj)\n\n\n[1 2 4]\n\nEquivalently:\n\n(-&gt; [1 2 4]\n    -&gt;code\n    r\n    r-&gt;clj)\n\n\n[1 2 4]\n\n\n3.3.1 Primitive data types\n\n(-&gt; 1 r r-&gt;clj)\n\n\n[1]\n\n\n(-&gt; 2.0 r r-&gt;clj)\n\n\n[2.0]\n\n\n(-&gt; 3/4 r r-&gt;clj)\n\n\n[0.75]\n\n\n(-&gt; true r r-&gt;clj)\n\n\n[true]\n\n\n(-&gt; false r r-&gt;clj)\n\n\n[false]\n\nnil is converted to NULL or NA (in vectors or maps)\n\n(-&gt; nil r r-&gt;clj)\n\n\nnil\n\n\n(-&gt;code nil)\n\n\n\"NULL\"\n\nInfinities etc.\n\n(-&gt; ##Inf r r-&gt;clj)\n\n\n[##Inf]\n\n\n(-&gt;&gt; ##-Inf r r-&gt;clj)\n\n\n[##-Inf]\n\n\n(-&gt;&gt; ##NaN r r-&gt;clj first)\n\n\n##NaN\n\nWhen you pass a string to r, it is treated as code. So we have to escape double quotes if we actually mean to represent an R string (or an R character object, as it is called in R). However, when string is used inside a more complex form, it is escaped automatically.\n\n(-&gt;code \"\\\"this is a string\\\"\")\n\n\n\"\\\"\\\"this is a string\\\"\\\"\"\n\n\n(-&gt; \"\\\"this is a string\\\"\" r r-&gt;clj)\n\n\n[\"this is a string\"]\n\n\n(-&gt;code '(paste \"this is a string\"))\n\n\n\"paste(\\\"this is a string\\\")\"\n\n\n(-&gt; '(paste \"this is a string\") r r-&gt;clj)\n\n\n[\"this is a string\"]\n\nAny Named Clojure object that is not a String (like a keyword or a symbol) is converted to a R symbol.\n\n(-&gt;code :keyword)\n\n\n\"keyword\"\n\n\n(-&gt;code 'symb)\n\n\n\"symb\"\n\nAn RObject is converted to a R variable.\n\n(-&gt;code (r \"1+2\"))\n\n\n\".MEM$x6dc3621d3633404d\"\n\nDate/time is converted to a string.\n\n(-&gt;code #inst \"2031-02-03T11:22:33\")\n\n\n\"'2031-02-03 13:22:33'\"\n\n\n(r #inst \"2031-02-03T11:22:33\")\n\n\n[1] \"2031-02-03 13:22:33\"\n\n\n\n(-&gt; #inst \"2031-02-03T11:22:33\"\n    r\n    r-&gt;clj)\n\n\n[\"2031-02-03 13:22:33\"]\n\n\n\n3.3.2 Vectors\nA Clojure vector is converted to an R vector created using the c function. That means that nested vectors are flattened. All the values inside are translated to R recursively.\n\n(-&gt;code [1 2 3])\n\n\n\"c(1L,2L,3L)\"\n\n\n(-&gt; [[1] [2 [3]]] r r-&gt;clj)\n\n\n[1 2 3]\n\nSome Clojure sequences are interpreted as function calls, if it makes sense for their first element. However, sequences beginning with numbers or strings are treated as vectors.\n\n(r (range 11))\n\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n\n\n(r (map str (range 11)))\n\n\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n\n\n\n3.3.2.1 Tagged vectors\nWhen the first element of a vector or a sequence is a keyword starting with :!, some special conversion takes place.\n\n\n\nkeyword\nmeaning\n\n\n\n\n:!string\nvector of strings\n\n\n:!boolean\nvector of logicals\n\n\n:!int\nvector of integers\n\n\n:!double\nvector of doubles\n\n\n:!named\nnamed vector\n\n\n:!list\npartially named list\n\n\n:!call\ntreat the rest of the vector as callable sequence\n\n\n:!ct\nvector of POSIXct classes\n\n\n:!lt\nvector of POSIXlt classes\n\n\n\nnil in a vector is converted to NA\n\n(-&gt; [:!string 1 nil 3]\n    r r-&gt;clj)\n\n\n[\"1\" nil \"3\"]\n\n\n(-&gt; [:!boolean 1 true nil false]\n    r r-&gt;clj)\n\n\n[true true nil false]\n\n\n(-&gt; [:!double 1.0 nil 3]\n    r r-&gt;clj)\n\n\n[1.0 nil 3.0]\n\n\n(-&gt; [:!int 1.0 nil 3]\n    r r-&gt;clj)\n\n\n[1 nil 3]\n\n\n(-&gt; [:!named 1 2 :abc 3]\n    r r-&gt;clj)\n\n\n[1 2 3]\n\nI think here we should return map maybe?\n\n(-&gt; [:!list :a 1 :b [:!list 1 2 :c [\"a\" \"b\"]]]\n    r r-&gt;clj)\n\n\n{:a [1], :b {0 [1], 1 [2], :c [\"a\" \"b\"]}}\n\n\n(-&gt; [:!ct #inst \"2011-11-01T22:33:11\"]\n    r r-&gt;clj)\n\n\n[#object[java.time.LocalDateTime 0x7674ced3 \"2011-11-02T00:33:11\"]]\n\n\n(-&gt; [:!lt #inst \"2011-11-01T22:33:11\"]\n    r r-&gt;clj)\n\n\n[#object[java.time.LocalDateTime 0x60263984 \"2011-11-02T00:33:11\"]]\n\nWhen a vector is big enough, it is transfered not directly as code, but as the name of a newly created R variable holding the corresponding vector data, converted via the Java conversion layer.\n\n(-&gt;code (range 10000))\n\n\n\".MEM$x65fff8a339e54aa7\"\n\n\n(-&gt; (conj (range 10000) :!string)\n    r r-&gt;clj first)\n\n\n\"0\"\n\nTreat vector as callable.\n\n(-&gt; [:!call 'mean [1 2 3 4]]\n    r r-&gt;clj)\n\n\n[2.5]\n\n\n\n\n3.3.3 Maps\nA Clojue Map is transformed to an R named list. As with vectors, all data elements inside are processed recursively.\n\n(r {:a 1 :b nil})\n\n\n$a\n[1] 1\n\n$b\n[1] NA\n\n\n\n\n(-&gt; {:a 1 :b nil :c [2.0 3 4]}\n    r r-&gt;clj)\n\n\n{:a [1], :b [nil], :c [2.0 3.0 4.0]}\n\nBigger maps are transfered to R variables via the Java conversion layer.\n\n(-&gt;code (zipmap (map #(str \"key\" %) (range 100))\n                (range 1000 1100)))\n\n\n\".MEM$xf8cc6a4a8187469b\"\n\n\n(-&gt; (r (zipmap (map #(str \"key\" %) (range 100))\n               (range 1000 1100)))\n    r-&gt;clj\n    :key23)\n\n\n[1023]\n\n\n\n3.3.4 Calls, operators and special symbols\nNow we come to the most important part, using sequences to represent function calls. One way to do that is using a list, where the first element is a symbol corresponding to the name of an R function, or an RObject corresponding to an R function. To create a function call we use the same structure as in clojure. The two examples below are are equivalent.\nRecall that symbols are converted to R variable names on the R side.\n\n(r \"mean(c(1,2,3))\")\n\n\n[1] 2\n\n\n\n(r '(mean [1 2 3]))\n\n\n[1] 2\n\n\n\n(-&gt;code '(mean [1 2 3]))\n\n\n\"mean(c(1L,2L,3L))\"\n\nHere is another example.\n\n(r '(&lt;- x (mean [1 2 3])))\n\n\n[1] 2\n\n\n\n(-&gt;&gt; 'x r r-&gt;clj)\n\n\n[2.0]\n\nHere is another example.\nRecall that RObjects are converted to the names of the corresponding R objects.\n\n(-&gt; (list (r 'median) [1 2 4])\n    -&gt;code)\n\n\n\".MEM$x7cfed1ed6b1e43b9(c(1L,2L,4L))\"\n\n\n(-&gt; (list (r 'median) [1 2 4])\n    r\n    r-&gt;clj)\n\n\n[2]\n\nYou can call using special names (surrounded by backquote) as strings\n\n(-&gt; '(\"`^`\" 10 2) r r-&gt;clj)\n\n\n[100.0]\n\nThere are some special symbols which get a special meaning on,:\n\n\n\nsymbol\nmeaning\n\n\n\n\n'( )\nWrap first element of the quoted list into parentheses\n\n\nfunction\nR function definition\n\n\ndo\njoin all forms using “;” and wrap into {}\n\n\nfor\nfor loop with multiple bindings\n\n\nwhile\nwhile loop\n\n\nif\nif or if-else\n\n\ntilde or formula\nR formula\n\n\ncolon\ncolon (:)\n\n\nrsymbol\nqualified and/or backticked symbol wrapper\n\n\nbra\n[\n\n\nbrabra\n[[\n\n\nbra&lt;-\n[&lt;-\n\n\nbrabra&lt;-\n[[&lt;-\n\n\n\nSometimes symbols are represented as string with spaces inside, also can be prepend with package name. Tick ' in clojure is not enough for that, for that purpose you can use rsymbol.\n\n(r/-&gt;code '(rsymbol name))\n\n\n\"name\"\n\n\n(r/-&gt;code '(rsymbol \"name with spaces\"))\n\n\n\"`name with spaces`\"\n\n\n(r/-&gt;code '(rsymbol package name))\n\n\n\"package::name\"\n\n\n(r/-&gt;code '(rsymbol \"package with spaces\" name))\n\n\n\"`package with spaces`::name\"\n\n\n(-&gt; ((r/rsymbol 'base 'mean) [1 2 3 4])\n    r-&gt;clj)\n\n\n[2.5]\n\n\n(-&gt; ((r/rsymbol \"[\") 'iris 1) r-&gt;clj dataset/mapseq-reader first :Sepal.Length)\n\n\n5.1\n\n\n(-&gt; ((r/rsymbol 'base \"[\") 'iris 1) r-&gt;clj dataset/mapseq-reader first :Sepal.Length)\n\n\n5.1\n\nAll bra... functions accept nil or empty-symbol to mark empty selector.\n\n(def m (r '(matrix (colon 1 6)\n                   :nrow 2\n                   :dimnames [:!list [\"a\" \"b\"] (bra LETTERS (colon 1 3))])))\n\n\nm\n\n\n  A B C\na 1 3 5\nb 2 4 6\n\n\n\n(-&gt; '(bra ~m nil 1)\n    r r-&gt;clj)\n\n\n[1 2]\n\n\n(-&gt; '(bra ~m 1 nil)\n    r r-&gt;clj)\n\n\n[1 3 5]\n\n\n(-&gt; '(bra ~m 1 nil :drop false)\n    r\n    r-&gt;clj\n    dataset/value-reader)\n\n\n[[\"a\" 1 3 5]]\n\n\n(-&gt; '(bra&lt;- ~m 1 nil [11 22 33])\n    r\n    r-&gt;clj\n    dataset/value-reader)\n\n\n[[\"a\" 11 22 33] [\"b\" 2 4 6]]\n\n\n(-&gt; '(bra&lt;- ~m nil 1 [22 33])\n    r\n    r-&gt;clj\n    dataset/value-reader)\n\n\n[[\"a\" 22 3 5] [\"b\" 33 4 6]]\n\n\n(-&gt; (r/bra m nil 1)\n    r-&gt;clj)\n\n\n[1 2]\n\n\n(-&gt; (r/bra m 1 nil)\n    r-&gt;clj)\n\n\n[1 3 5]\n\n\n(-&gt; (r/bra m 1 nil :drop false)\n    r-&gt;clj\n    dataset/value-reader)\n\n\n[[\"a\" 1 3 5]]\n\n\n(-&gt; (r/bra&lt;- m 1 nil [11 22 33])\n    r-&gt;clj\n    dataset/value-reader)\n\n\n[[\"a\" 11 22 33] [\"b\" 2 4 6]]\n\n\n(-&gt; (r/bra&lt;- m nil 1 [22 33])\n    r-&gt;clj\n    dataset/value-reader)\n\n\n[[\"a\" 22 3 5] [\"b\" 33 4 6]]\n\n\n(def l (r [:!list \"a\" \"b\" \"c\"]))\n\n\nl\n\n\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n[1] \"c\"\n\n\n\n\n(-&gt; '(brabra ~l 2)\n    r r-&gt;clj)\n\n\n[\"b\"]\n\n\n(-&gt; '(brabra&lt;- ~l 2 nil)\n    r r-&gt;clj)\n\n\n[[\"a\"] [\"c\"]]\n\n\n(-&gt; '(brabra&lt;- ~l 5 \"fifth\")\n    r r-&gt;clj)\n\n\n[[\"a\"] [\"b\"] [\"c\"] nil [\"fifth\"]]\n\n\n(-&gt; (r/brabra l 2)\n    r-&gt;clj)\n\n\n[\"b\"]\n\n\n(-&gt; (r/brabra&lt;- l 2 nil)\n    r-&gt;clj)\n\n\n[[\"a\"] [\"c\"]]\n\n\n(-&gt; (r/brabra&lt;- l 5 \"fifth\")\n    r-&gt;clj)\n\n\n[[\"a\"] [\"b\"] [\"c\"] nil [\"fifth\"]]\n\nYou can use if with optional else form. Use do to create block of operations\n\n(-&gt; '(if true 11 22)\n    r r-&gt;clj)\n\n\n[11]\n\n\n(-&gt; '(if false 11 22)\n    r r-&gt;clj)\n\n\n[22]\n\n\n(-&gt; '(if true 11)\n    r r-&gt;clj)\n\n\n[11]\n\n\n(-&gt; '(if false 11)\n    r r-&gt;clj)\n\n\nnil\n\n\n(-&gt; '(if true (do (&lt;- x [1 2 3 4])\n                  (mean x)))\n    r r-&gt;clj)\n\n\n[2.5]\n\ndo wraps everything into curly braces {}\n\n(-&gt;code '(do (&lt;- x 1)\n             (&lt;- x (+ x 1))))\n\n\n\"{x&lt;-1L;x&lt;-(x+1L)}\"\n\nLoops\n\n(-&gt; '(do\n       (&lt;- v 3)\n       (&lt;- coll [v])\n       (while (&gt; v 0)\n         (&lt;- v (- v 1))\n         (&lt;- coll [coll v]))\n       coll)\n    r\n    r-&gt;clj)\n\n\n[3 2 1 0]\n\n\n(def for-form '(do\n                 (&lt;- coll [])\n                 (for [a [1 2]\n                       b [3 4]]\n                   (&lt;- coll [coll (* a b)]))\n                 coll))\n\n\n(-&gt;code for-form)\n\n\n\"{coll&lt;-c();for(a in c(1L,2L)){for(b in c(3L,4L)){coll&lt;-c(coll,(a*b))\\n}\\n};coll}\"\n\n\n(-&gt; for-form r r-&gt;clj)\n\n\n[3 4 6 8]\n\nSometimes wrapping into parentheses is needed.\n\n(-&gt;code '(:!wrap z))\n\n\n\"(z)\"\n\n\n(-&gt;code '[:!list 1.0 2.0 3.0 (:!wrap inside)])\n\n\n\"list(1.0,2.0,3.0,(inside))\"\n\n\n3.3.4.1 Function definitions\nTo define a function, use the function symbol with a following vector of argument names, and then the body. Arguments are treated as a partially named list.\n\n(r '(&lt;- stat (function [x :median false ...]\n                       (ifelse median\n                               (median x ...)\n                               (mean x ...)))))\n\n\nfunction (x, median = FALSE, ...) \n{\n    ifelse(median, median(x, ...), mean(x, ...))\n}\n\n\n\n(-&gt; '(stat [100 33 22 44 55])\n    r r-&gt;clj)\n\n\n[50.8]\n\n\n(-&gt; '(stat [100 33 22 44 55] :median true)\n    r r-&gt;clj)\n\n\n[44]\n\n\n(-&gt; '(stat [100 33 22 44 55 nil])\n    r r-&gt;clj)\n\n\n[nil]\n\n\n(-&gt; '(stat [100 33 22 44 55 nil] :na.rm true)\n    r r-&gt;clj)\n\n\n[50.8]\n\n\n\n3.3.4.2 Formulas\nTo create an R formula, use tilde or formula with two arguments, for the left and right sides (to skip one, just use nil).\n\n(r '(formula y x))\n\n\ny ~ x\n\n\n\n(r '(formula y (| (+ a b c d) e)))\n\n\ny ~ a + b + c + d | e\n\n\n\n(r '(formula nil (| x y)))\n\n\n~x | y\n\n\n\n\n3.3.4.3 Operators\n\n(-&gt;code '(+ 1 2 3 4 5))\n\n\n\"((((1L+2L)+3L)+4L)+5L)\"\n\n\n(-&gt;code '(/ 1 2 3 4 5))\n\n\n\"((((1L/2L)/3L)/4L)/5L)\"\n\n\n(-&gt;code '(- [1 2 3]))\n\n\n\"-(c(1L,2L,3L))\"\n\n\n(-&gt;code '(&lt;- a b c 123))\n\n\n\"a&lt;-b&lt;-c&lt;-123L\"\n\n\n(-&gt;code '($ a b c d))\n\n\n\"a$b$c$d\"\n\n\n\n3.3.4.4 Unquoting\nSometimes we want to use objects created outside our form (defined earlier or in let). For this case you can use the unqote (~) symbol. There are two options:\n\nwhen using quoting ', unqote evaluates the uquoted form using eval. eval has some constrains, the most important is that local bindings (let bindings) can’t be use.\nwhen using syntax quoting (backquote `), unqote acts as in clojure macros – all unquoted forms are evaluated instantly.\n\n\n(def v (r '(+ 1 2 3 4)))\n\n\n(-&gt; '(* 22.0 ~v)\n    r r-&gt;clj)\n\n\n[220.0]\n\n\n(let [local-v (r '(+ 1 2 3 4))\n      local-list [4 5 6]]\n  (-&gt; `(* 22.0 ~local-v ~@local-list)\n      r r-&gt;clj))\n\n\n[26400.0]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R code generation from Clojure forms</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.codegen.html#calling-r-functions",
    "href": "clojisr.v1.tutorials.codegen.html#calling-r-functions",
    "title": "3  R code generation from Clojure forms",
    "section": "3.4 Calling R functions",
    "text": "3.4 Calling R functions\nYou are not limited to the use code forms. When an RObject correspinds to an R function, it can be used and called as normal Clojure functions.\n\n(def square (r '(function [x] (* x x))))\n\n\n(-&gt; 123 square r-&gt;clj)\n\n\n[15129]\n\n\nsource: notebooks/clojisr/v1/tutorials/codegen.clj",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R code generation from Clojure forms</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html",
    "href": "clojisr.v1.tutorials.dataset.html",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "",
    "text": "4.1 Data Frame\nAny data.frame, also tribble and data.table are treated the same. If row.names are available they are converted to the additional column :$row.names.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#data-frame",
    "href": "clojisr.v1.tutorials.dataset.html#data-frame",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "",
    "text": "r.datasets/BOD\n\n\n  Time demand\n1    1    8.3\n2    2   10.3\n3    3   19.0\n4    4   16.0\n5    5   15.6\n6    7   19.8\n\n\n\n(r-&gt;clj '(attributes BOD))\n\n\n{:names [\"Time\" \"demand\"],\n :class [\"data.frame\"],\n :row.names [1 2 3 4 5 6],\n :reference [\"A1.4, p. 270\"]}\n\n\n(r-&gt;clj r.datasets/BOD)\n\n\n_unnamed [6 2]:\n\n\n\n:Time\n:demand\n\n\n\n\n1.0\n8.3\n\n\n2.0\n10.3\n\n\n3.0\n19.0\n\n\n4.0\n16.0\n\n\n5.0\n15.6\n\n\n7.0\n19.8\n\n\n\n\n\nr.datasets/CO2\n\n\n   Plant        Type  Treatment conc uptake\n1    Qn1      Quebec nonchilled   95   16.0\n2    Qn1      Quebec nonchilled  175   30.4\n3    Qn1      Quebec nonchilled  250   34.8\n4    Qn1      Quebec nonchilled  350   37.2\n5    Qn1      Quebec nonchilled  500   35.3\n6    Qn1      Quebec nonchilled  675   39.2\n7    Qn1      Quebec nonchilled 1000   39.7\n8    Qn2      Quebec nonchilled   95   13.6\n9    Qn2      Quebec nonchilled  175   27.3\n10   Qn2      Quebec nonchilled  250   37.1\n11   Qn2      Quebec nonchilled  350   41.8\n12   Qn2      Quebec nonchilled  500   40.6\n13   Qn2      Quebec nonchilled  675   41.4\n14   Qn2      Quebec nonchilled 1000   44.3\n15   Qn3      Quebec nonchilled   95   16.2\n16   Qn3      Quebec nonchilled  175   32.4\n17   Qn3      Quebec nonchilled  250   40.3\n18   Qn3      Quebec nonchilled  350   42.1\n19   Qn3      Quebec nonchilled  500   42.9\n20   Qn3      Quebec nonchilled  675   43.9\n21   Qn3      Quebec nonchilled 1000   45.5\n22   Qc1      Quebec    chilled   95   14.2\n23   Qc1      Quebec    chilled  175   24.1\n24   Qc1      Quebec    chilled  250   30.3\n25   Qc1      Quebec    chilled  350   34.6\n26   Qc1      Quebec    chilled  500   32.5\n27   Qc1      Quebec    chilled  675   35.4\n28   Qc1      Quebec    chilled 1000   38.7\n29   Qc2      Quebec    chilled   95    9.3\n30   Qc2      Quebec    chilled  175   27.3\n31   Qc2      Quebec    chilled  250   35.0\n32   Qc2      Quebec    chilled  350   38.8\n33   Qc2      Quebec    chilled  500   38.6\n34   Qc2      Quebec    chilled  675   37.5\n35   Qc2      Quebec    chilled 1000   42.4\n36   Qc3      Quebec    chilled   95   15.1\n37   Qc3      Quebec    chilled  175   21.0\n38   Qc3      Quebec    chilled  250   38.1\n39   Qc3      Quebec    chilled  350   34.0\n40   Qc3      Quebec    chilled  500   38.9\n41   Qc3      Quebec    chilled  675   39.6\n42   Qc3      Quebec    chilled 1000   41.4\n43   Mn1 Mississippi nonchilled   95   10.6\n44   Mn1 Mississippi nonchilled  175   19.2\n45   Mn1 Mississippi nonchilled  250   26.2\n46   Mn1 Mississippi nonchilled  350   30.0\n47   Mn1 Mississippi nonchilled  500   30.9\n48   Mn1 Mississippi nonchilled  675   32.4\n49   Mn1 Mississippi nonchilled 1000   35.5\n50   Mn2 Mississippi nonchilled   95   12.0\n51   Mn2 Mississippi nonchilled  175   22.0\n52   Mn2 Mississippi nonchilled  250   30.6\n53   Mn2 Mississippi nonchilled  350   31.8\n54   Mn2 Mississippi nonchilled  500   32.4\n55   Mn2 Mississippi nonchilled  675   31.1\n56   Mn2 Mississippi nonchilled 1000   31.5\n57   Mn3 Mississippi nonchilled   95   11.3\n58   Mn3 Mississippi nonchilled  175   19.4\n59   Mn3 Mississippi nonchilled  250   25.8\n60   Mn3 Mississippi nonchilled  350   27.9\n61   Mn3 Mississippi nonchilled  500   28.5\n62   Mn3 Mississippi nonchilled  675   28.1\n63   Mn3 Mississippi nonchilled 1000   27.8\n64   Mc1 Mississippi    chilled   95   10.5\n65   Mc1 Mississippi    chilled  175   14.9\n66   Mc1 Mississippi    chilled  250   18.1\n67   Mc1 Mississippi    chilled  350   18.9\n68   Mc1 Mississippi    chilled  500   19.5\n69   Mc1 Mississippi    chilled  675   22.2\n70   Mc1 Mississippi    chilled 1000   21.9\n71   Mc2 Mississippi    chilled   95    7.7\n72   Mc2 Mississippi    chilled  175   11.4\n73   Mc2 Mississippi    chilled  250   12.3\n74   Mc2 Mississippi    chilled  350   13.0\n75   Mc2 Mississippi    chilled  500   12.5\n76   Mc2 Mississippi    chilled  675   13.7\n77   Mc2 Mississippi    chilled 1000   14.4\n78   Mc3 Mississippi    chilled   95   10.6\n79   Mc3 Mississippi    chilled  175   18.0\n80   Mc3 Mississippi    chilled  250   17.9\n81   Mc3 Mississippi    chilled  350   17.9\n82   Mc3 Mississippi    chilled  500   17.9\n83   Mc3 Mississippi    chilled  675   18.9\n84   Mc3 Mississippi    chilled 1000   19.9\n\n\n\n(r-&gt;clj '(attributes CO2))\n\n\n{:names [\"Plant\" \"Type\" \"Treatment\" \"conc\" \"uptake\"],\n :row.names\n [1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n  10\n  11\n  12\n  13\n  14\n  15\n  16\n  17\n  18\n  19\n  20\n  21\n  22\n  23\n  24\n  25\n  26\n  27\n  28\n  29\n  30\n  31\n  32\n  33\n  34\n  35\n  36\n  37\n  38\n  39\n  40\n  41\n  42\n  43\n  44\n  45\n  46\n  47\n  48\n  49\n  50\n  51\n  52\n  53\n  54\n  55\n  56\n  57\n  58\n  59\n  60\n  61\n  62\n  63\n  64\n  65\n  66\n  67\n  68\n  69\n  70\n  71\n  72\n  73\n  74\n  75\n  76\n  77\n  78\n  79\n  80\n  81\n  82\n  83\n  84],\n :class [\"nfnGroupedData\" \"nfGroupedData\" \"groupedData\" \"data.frame\"],\n :formula [~ uptake [| conc Plant]],\n :outer [~ [* Treatment Type]],\n :labels\n {:x [\"Ambient carbon dioxide concentration\"], :y [\"CO2 uptake rate\"]},\n :units {:x [\"(uL/L)\"], :y [\"(umol/m^2 s)\"]}}\n\n\n(r-&gt;clj r.datasets/CO2)\n\n\n_unnamed [84 6]:\n\n\n\n:$row.names\n:Plant\n:Type\n:Treatment\n:conc\n:uptake\n\n\n\n\n1\n:Qn1\n:Quebec\n:nonchilled\n95.0\n16.0\n\n\n2\n:Qn1\n:Quebec\n:nonchilled\n175.0\n30.4\n\n\n3\n:Qn1\n:Quebec\n:nonchilled\n250.0\n34.8\n\n\n4\n:Qn1\n:Quebec\n:nonchilled\n350.0\n37.2\n\n\n5\n:Qn1\n:Quebec\n:nonchilled\n500.0\n35.3\n\n\n6\n:Qn1\n:Quebec\n:nonchilled\n675.0\n39.2\n\n\n7\n:Qn1\n:Quebec\n:nonchilled\n1000.0\n39.7\n\n\n8\n:Qn2\n:Quebec\n:nonchilled\n95.0\n13.6\n\n\n9\n:Qn2\n:Quebec\n:nonchilled\n175.0\n27.3\n\n\n10\n:Qn2\n:Quebec\n:nonchilled\n250.0\n37.1\n\n\n…\n…\n…\n…\n…\n…\n\n\n74\n:Mc2\n:Mississippi\n:chilled\n350.0\n13.0\n\n\n75\n:Mc2\n:Mississippi\n:chilled\n500.0\n12.5\n\n\n76\n:Mc2\n:Mississippi\n:chilled\n675.0\n13.7\n\n\n77\n:Mc2\n:Mississippi\n:chilled\n1000.0\n14.4\n\n\n78\n:Mc3\n:Mississippi\n:chilled\n95.0\n10.6\n\n\n79\n:Mc3\n:Mississippi\n:chilled\n175.0\n18.0\n\n\n80\n:Mc3\n:Mississippi\n:chilled\n250.0\n17.9\n\n\n81\n:Mc3\n:Mississippi\n:chilled\n350.0\n17.9\n\n\n82\n:Mc3\n:Mississippi\n:chilled\n500.0\n17.9\n\n\n83\n:Mc3\n:Mississippi\n:chilled\n675.0\n18.9\n\n\n84\n:Mc3\n:Mississippi\n:chilled\n1000.0\n19.9",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#table",
    "href": "clojisr.v1.tutorials.dataset.html#table",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "4.2 Table",
    "text": "4.2 Table\nTable is converted to a long form where each dimension has it’s own column. If column names are not available, column id is prefixed with :$col. Values are stored in the last, :$value column.\n\nr.datasets/UCBAdmissions\n\n\n, , Dept = A\n\n          Gender\nAdmit      Male Female\n  Admitted  512     89\n  Rejected  313     19\n\n, , Dept = B\n\n          Gender\nAdmit      Male Female\n  Admitted  353     17\n  Rejected  207      8\n\n, , Dept = C\n\n          Gender\nAdmit      Male Female\n  Admitted  120    202\n  Rejected  205    391\n\n, , Dept = D\n\n          Gender\nAdmit      Male Female\n  Admitted  138    131\n  Rejected  279    244\n\n, , Dept = E\n\n          Gender\nAdmit      Male Female\n  Admitted   53     94\n  Rejected  138    299\n\n, , Dept = F\n\n          Gender\nAdmit      Male Female\n  Admitted   22     24\n  Rejected  351    317\n\n\n\n\n(r-&gt;clj '(attributes UCBAdmissions))\n\n\n{:dim [2 2 6],\n :dimnames\n {:Admit [\"Admitted\" \"Rejected\"],\n  :Gender [\"Male\" \"Female\"],\n  :Dept [\"A\" \"B\" \"C\" \"D\" \"E\" \"F\"]},\n :class [\"table\"]}\n\n\n(r-&gt;clj r.datasets/UCBAdmissions)\n\n\n_unnamed [24 4]:\n\n\n\n:Admit\n:Gender\n:Dept\n:$value\n\n\n\n\nAdmitted\nMale\nA\n512.0\n\n\nAdmitted\nMale\nB\n313.0\n\n\nAdmitted\nMale\nC\n89.0\n\n\nAdmitted\nMale\nD\n19.0\n\n\nAdmitted\nMale\nE\n353.0\n\n\nAdmitted\nMale\nF\n207.0\n\n\nAdmitted\nFemale\nA\n17.0\n\n\nAdmitted\nFemale\nB\n8.0\n\n\nAdmitted\nFemale\nC\n120.0\n\n\nAdmitted\nFemale\nD\n205.0\n\n\n…\n…\n…\n…\n\n\nRejected\nMale\nB\n279.0\n\n\nRejected\nMale\nC\n131.0\n\n\nRejected\nMale\nD\n244.0\n\n\nRejected\nMale\nE\n53.0\n\n\nRejected\nMale\nF\n138.0\n\n\nRejected\nFemale\nA\n94.0\n\n\nRejected\nFemale\nB\n299.0\n\n\nRejected\nFemale\nC\n22.0\n\n\nRejected\nFemale\nD\n351.0\n\n\nRejected\nFemale\nE\n24.0\n\n\nRejected\nFemale\nF\n317.0\n\n\n\n\n\nr.datasets/crimtab\n\n\n     142.24 144.78 147.32 149.86 152.4 154.94 157.48 160.02 162.56 165.1 167.64\n9.4       0      0      0      0     0      0      0      0      0     0      0\n9.5       0      0      0      0     0      1      0      0      0     0      0\n9.6       0      0      0      0     0      0      0      0      0     0      0\n9.7       0      0      0      0     0      0      0      0      0     0      0\n9.8       0      0      0      0     0      0      1      0      0     0      0\n9.9       0      0      1      0     1      0      1      0      0     0      0\n10        1      0      0      1     2      0      2      0      0     1      0\n10.1      0      0      0      1     3      1      0      1      1     0      0\n10.2      0      0      2      2     2      1      0      2      0     1      0\n10.3      0      1      1      3     2      2      3      5      0     0      0\n10.4      0      0      1      1     2      3      3      4      3     3      0\n10.5      0      0      0      1     3      7      6      4      3     1      3\n10.6      0      0      0      1     4      5      9     14      6     3      1\n10.7      0      0      1      2     4      9     14     16     15     7      3\n10.8      0      0      0      2     5      6     14     27     10     7      1\n10.9      0      0      0      0     2      6     14     24     27    14     10\n11        0      0      0      2     6     12     15     31     37    27     17\n11.1      0      0      0      3     3     12     22     26     24    26     24\n11.2      0      0      0      3     2      7     21     30     38    29     27\n11.3      0      0      0      1     0      5     10     24     26    39     26\n11.4      0      0      0      0     3      4      9     29     56    58     26\n11.5      0      0      0      0     0      5     11     17     33    57     38\n11.6      0      0      0      0     2      1      4     13     37    39     48\n11.7      0      0      0      0     0      2      9     17     30    37     48\n11.8      0      0      0      0     1      0      2     11     15    35     41\n11.9      0      0      0      0     1      1      2     12     10    27     32\n12        0      0      0      0     0      0      1      4      8    19     42\n12.1      0      0      0      0     0      0      0      2      4    13     22\n12.2      0      0      0      0     0      0      1      2      5     6     23\n12.3      0      0      0      0     0      0      0      0      4     8     10\n12.4      0      0      0      0     0      0      1      1      1     2      7\n12.5      0      0      0      0     0      0      0      1      0     1      3\n12.6      0      0      0      0     0      0      0      0      0     1      0\n12.7      0      0      0      0     0      0      0      0      0     1      1\n12.8      0      0      0      0     0      0      0      0      0     0      1\n12.9      0      0      0      0     0      0      0      0      0     0      0\n13        0      0      0      0     0      0      0      0      0     0      3\n13.1      0      0      0      0     0      0      0      0      0     0      0\n13.2      0      0      0      0     0      0      0      0      0     0      1\n13.3      0      0      0      0     0      0      0      0      0     0      0\n13.4      0      0      0      0     0      0      0      0      0     0      0\n13.5      0      0      0      0     0      0      0      0      0     0      0\n     170.18 172.72 175.26 177.8 180.34 182.88 185.42 187.96 190.5 193.04 195.58\n9.4       0      0      0     0      0      0      0      0     0      0      0\n9.5       0      0      0     0      0      0      0      0     0      0      0\n9.6       0      0      0     0      0      0      0      0     0      0      0\n9.7       0      0      0     0      0      0      0      0     0      0      0\n9.8       0      0      0     0      0      0      0      0     0      0      0\n9.9       0      0      0     0      0      0      0      0     0      0      0\n10        0      0      0     0      0      0      0      0     0      0      0\n10.1      0      0      0     0      0      0      0      0     0      0      0\n10.2      0      0      0     0      0      0      0      0     0      0      0\n10.3      0      0      0     0      0      0      0      0     0      0      0\n10.4      0      0      0     0      0      0      0      0     0      0      0\n10.5      1      0      1     0      0      0      0      0     0      0      0\n10.6      0      0      1     0      0      0      0      0     0      0      0\n10.7      1      2      0     0      0      0      0      0     0      0      0\n10.8      2      1      0     0      0      0      0      0     0      0      0\n10.9      4      1      0     0      0      0      0      0     0      0      0\n11       10      6      0     0      0      0      0      0     0      0      0\n11.1      7      4      1     0      0      0      0      0     0      0      0\n11.2     20      4      1     0      0      0      0      0     0      0      1\n11.3     24      7      2     0      0      0      0      0     0      0      0\n11.4     22     10     11     0      0      0      0      0     0      0      0\n11.5     34     25     11     2      0      0      0      0     0      0      0\n11.6     38     27     12     2      2      0      1      0     0      0      0\n11.7     45     24      9     9      2      0      0      0     0      0      0\n11.8     34     29     10     5      1      0      0      0     0      0      0\n11.9     35     19     10     9      3      1      0      0     0      0      0\n12       39     22     16     8      2      2      0      0     0      0      0\n12.1     28     15     27    10      4      1      0      0     0      0      0\n12.2     17     16     11     8      1      1      0      0     0      0      0\n12.3     13     20     23     6      5      0      0      0     0      0      0\n12.4     12      4      7     7      1      0      0      1     0      0      0\n12.5     12     11      8     6      8      0      2      0     0      0      0\n12.6      3      5      7     8      6      3      1      1     0      0      0\n12.7      7      5      5     8      2      2      0      0     0      0      0\n12.8      2      3      1     8      5      3      1      1     0      0      0\n12.9      1      2      2     0      1      1      0      0     0      0      0\n13        0      1      0     1      0      2      1      0     0      0      0\n13.1      1      1      0     0      0      0      0      0     0      0      0\n13.2      1      0      1     0      3      0      0      0     0      0      0\n13.3      0      0      0     0      0      1      0      1     0      0      0\n13.4      0      0      0     0      0      0      0      0     0      0      0\n13.5      0      0      0     0      0      0      1      0     0      0      0\n\n\n\n(r-&gt;clj '(attributes crimtab))\n\n\n{:dim [42 22],\n :dimnames\n [[\"9.4\"\n   \"9.5\"\n   \"9.6\"\n   \"9.7\"\n   \"9.8\"\n   \"9.9\"\n   \"10\"\n   \"10.1\"\n   \"10.2\"\n   \"10.3\"\n   \"10.4\"\n   \"10.5\"\n   \"10.6\"\n   \"10.7\"\n   \"10.8\"\n   \"10.9\"\n   \"11\"\n   \"11.1\"\n   \"11.2\"\n   \"11.3\"\n   \"11.4\"\n   \"11.5\"\n   \"11.6\"\n   \"11.7\"\n   \"11.8\"\n   \"11.9\"\n   \"12\"\n   \"12.1\"\n   \"12.2\"\n   \"12.3\"\n   \"12.4\"\n   \"12.5\"\n   \"12.6\"\n   \"12.7\"\n   \"12.8\"\n   \"12.9\"\n   \"13\"\n   \"13.1\"\n   \"13.2\"\n   \"13.3\"\n   \"13.4\"\n   \"13.5\"]\n  [\"142.24\"\n   \"144.78\"\n   \"147.32\"\n   \"149.86\"\n   \"152.4\"\n   \"154.94\"\n   \"157.48\"\n   \"160.02\"\n   \"162.56\"\n   \"165.1\"\n   \"167.64\"\n   \"170.18\"\n   \"172.72\"\n   \"175.26\"\n   \"177.8\"\n   \"180.34\"\n   \"182.88\"\n   \"185.42\"\n   \"187.96\"\n   \"190.5\"\n   \"193.04\"\n   \"195.58\"]],\n :class [\"table\"]}\n\n\n(r-&gt;clj r.datasets/crimtab)\n\n\n_unnamed [924 3]:\n\n\n\n:\\(col-0 | :\\)col-1\n:$value\n\n\n\n\n\n9.4\n142.24\n0\n\n\n9.4\n144.78\n0\n\n\n9.4\n147.32\n0\n\n\n9.4\n149.86\n0\n\n\n9.4\n152.4\n0\n\n\n9.4\n154.94\n0\n\n\n9.4\n157.48\n1\n\n\n9.4\n160.02\n0\n\n\n9.4\n162.56\n0\n\n\n9.4\n165.1\n0\n\n\n…\n…\n…\n\n\n13.5\n170.18\n0\n\n\n13.5\n172.72\n0\n\n\n13.5\n175.26\n0\n\n\n13.5\n177.8\n0\n\n\n13.5\n180.34\n0\n\n\n13.5\n182.88\n0\n\n\n13.5\n185.42\n0\n\n\n13.5\n187.96\n0\n\n\n13.5\n190.5\n0\n\n\n13.5\n193.04\n0\n\n\n13.5\n195.58\n0",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#matrices-arrays-multidimensional-arrays",
    "href": "clojisr.v1.tutorials.dataset.html#matrices-arrays-multidimensional-arrays",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "4.3 Matrices, arrays, multidimensional arrays",
    "text": "4.3 Matrices, arrays, multidimensional arrays\nFirst two dimensions creates dataset, all additional dimensions are added as columns\n\nr.datasets/VADeaths\n\n\n      Rural Male Rural Female Urban Male Urban Female\n50-54       11.7          8.7       15.4          8.4\n55-59       18.1         11.7       24.3         13.6\n60-64       26.9         20.3       37.0         19.3\n65-69       41.0         30.9       54.6         35.1\n70-74       66.0         54.3       71.1         50.0\n\n\n\n(r-&gt;clj '(attributes VADeaths))\n\n\n{:dim [5 4],\n :dimnames\n [[\"50-54\" \"55-59\" \"60-64\" \"65-69\" \"70-74\"]\n  [\"Rural Male\" \"Rural Female\" \"Urban Male\" \"Urban Female\"]]}\n\n\n(r-&gt;clj r.datasets/VADeaths)\n\n\n_unnamed [5 5]:\n\n\n\n:$row.names\nRural Male\nRural Female\nUrban Male\nUrban Female\n\n\n\n\n50-54\n11.7\n8.7\n15.4\n8.4\n\n\n55-59\n18.1\n11.7\n24.3\n13.6\n\n\n60-64\n26.9\n20.3\n37.0\n19.3\n\n\n65-69\n41.0\n30.9\n54.6\n35.1\n\n\n70-74\n66.0\n54.3\n71.1\n50.0\n\n\n\n\n\nr.datasets/freeny-x\n\n\n      lag quarterly revenue price index income level market potential\n [1,]               8.79636     4.70997      5.82110          12.9699\n [2,]               8.79236     4.70217      5.82558          12.9733\n [3,]               8.79137     4.68944      5.83112          12.9774\n [4,]               8.81486     4.68558      5.84046          12.9806\n [5,]               8.81301     4.64019      5.85036          12.9831\n [6,]               8.90751     4.62553      5.86464          12.9854\n [7,]               8.93673     4.61991      5.87769          12.9900\n [8,]               8.96161     4.61654      5.89763          12.9943\n [9,]               8.96044     4.61407      5.92574          12.9992\n[10,]               9.00868     4.60766      5.94232          13.0033\n[11,]               9.03049     4.60227      5.95365          13.0099\n[12,]               9.06906     4.58960      5.96120          13.0159\n[13,]               9.05871     4.57592      5.97805          13.0212\n[14,]               9.10698     4.58661      6.00377          13.0265\n[15,]               9.12685     4.57997      6.02829          13.0351\n[16,]               9.17096     4.57176      6.03475          13.0429\n[17,]               9.18665     4.56104      6.03906          13.0497\n[18,]               9.23823     4.54906      6.05046          13.0551\n[19,]               9.26487     4.53957      6.05563          13.0634\n[20,]               9.28436     4.51018      6.06093          13.0693\n[21,]               9.31378     4.50352      6.07103          13.0737\n[22,]               9.35025     4.49360      6.08018          13.0770\n[23,]               9.35835     4.46505      6.08858          13.0849\n[24,]               9.39767     4.44924      6.10199          13.0918\n[25,]               9.42150     4.43966      6.11207          13.0950\n[26,]               9.44223     4.42025      6.11596          13.0984\n[27,]               9.48721     4.41060      6.12129          13.1089\n[28,]               9.52374     4.41151      6.12200          13.1169\n[29,]               9.53980     4.39810      6.13119          13.1222\n[30,]               9.58123     4.38513      6.14705          13.1266\n[31,]               9.60048     4.37320      6.15336          13.1356\n[32,]               9.64496     4.32770      6.15627          13.1415\n[33,]               9.64390     4.32023      6.16274          13.1444\n[34,]               9.69405     4.30909      6.17369          13.1459\n[35,]               9.69958     4.30909      6.16135          13.1520\n[36,]               9.68683     4.30552      6.18231          13.1593\n[37,]               9.71774     4.29627      6.18768          13.1579\n[38,]               9.74924     4.27839      6.19377          13.1625\n[39,]               9.77536     4.27789      6.20030          13.1664\n\n\n\n(r-&gt;clj '(attributes freeny.x))\n\n\n{:dim [39 4],\n :dimnames\n [nil\n  [\"lag quarterly revenue\"\n   \"price index\"\n   \"income level\"\n   \"market potential\"]]}\n\n\n(r-&gt;clj r.datasets/freeny-x)\n\n\n_unnamed [39 4]:\n\n\n\n\n\n\n\n\n\nlag quarterly revenue\nprice index\nincome level\nmarket potential\n\n\n\n\n8.79636\n4.70997\n5.82110\n12.9699\n\n\n8.79236\n4.70217\n5.82558\n12.9733\n\n\n8.79137\n4.68944\n5.83112\n12.9774\n\n\n8.81486\n4.68558\n5.84046\n12.9806\n\n\n8.81301\n4.64019\n5.85036\n12.9831\n\n\n8.90751\n4.62553\n5.86464\n12.9854\n\n\n8.93673\n4.61991\n5.87769\n12.9900\n\n\n8.96161\n4.61654\n5.89763\n12.9943\n\n\n8.96044\n4.61407\n5.92574\n12.9992\n\n\n9.00868\n4.60766\n5.94232\n13.0033\n\n\n…\n…\n…\n…\n\n\n9.53980\n4.39810\n6.13119\n13.1222\n\n\n9.58123\n4.38513\n6.14705\n13.1266\n\n\n9.60048\n4.37320\n6.15336\n13.1356\n\n\n9.64496\n4.32770\n6.15627\n13.1415\n\n\n9.64390\n4.32023\n6.16274\n13.1444\n\n\n9.69405\n4.30909\n6.17369\n13.1459\n\n\n9.69958\n4.30909\n6.16135\n13.1520\n\n\n9.68683\n4.30552\n6.18231\n13.1593\n\n\n9.71774\n4.29627\n6.18768\n13.1579\n\n\n9.74924\n4.27839\n6.19377\n13.1625\n\n\n9.77536\n4.27789\n6.20030\n13.1664\n\n\n\n\n\nr.datasets/iris3\n\n\n, , Setosa\n\n      Sepal L. Sepal W. Petal L. Petal W.\n [1,]      5.1      3.5      1.4      0.2\n [2,]      4.9      3.0      1.4      0.2\n [3,]      4.7      3.2      1.3      0.2\n [4,]      4.6      3.1      1.5      0.2\n [5,]      5.0      3.6      1.4      0.2\n [6,]      5.4      3.9      1.7      0.4\n [7,]      4.6      3.4      1.4      0.3\n [8,]      5.0      3.4      1.5      0.2\n [9,]      4.4      2.9      1.4      0.2\n[10,]      4.9      3.1      1.5      0.1\n[11,]      5.4      3.7      1.5      0.2\n[12,]      4.8      3.4      1.6      0.2\n[13,]      4.8      3.0      1.4      0.1\n[14,]      4.3      3.0      1.1      0.1\n[15,]      5.8      4.0      1.2      0.2\n[16,]      5.7      4.4      1.5      0.4\n[17,]      5.4      3.9      1.3      0.4\n[18,]      5.1      3.5      1.4      0.3\n[19,]      5.7      3.8      1.7      0.3\n[20,]      5.1      3.8      1.5      0.3\n[21,]      5.4      3.4      1.7      0.2\n[22,]      5.1      3.7      1.5      0.4\n[23,]      4.6      3.6      1.0      0.2\n[24,]      5.1      3.3      1.7      0.5\n[25,]      4.8      3.4      1.9      0.2\n[26,]      5.0      3.0      1.6      0.2\n[27,]      5.0      3.4      1.6      0.4\n[28,]      5.2      3.5      1.5      0.2\n[29,]      5.2      3.4      1.4      0.2\n[30,]      4.7      3.2      1.6      0.2\n[31,]      4.8      3.1      1.6      0.2\n[32,]      5.4      3.4      1.5      0.4\n[33,]      5.2      4.1      1.5      0.1\n[34,]      5.5      4.2      1.4      0.2\n[35,]      4.9      3.1      1.5      0.2\n[36,]      5.0      3.2      1.2      0.2\n[37,]      5.5      3.5      1.3      0.2\n[38,]      4.9      3.6      1.4      0.1\n[39,]      4.4      3.0      1.3      0.2\n[40,]      5.1      3.4      1.5      0.2\n[41,]      5.0      3.5      1.3      0.3\n[42,]      4.5      2.3      1.3      0.3\n[43,]      4.4      3.2      1.3      0.2\n[44,]      5.0      3.5      1.6      0.6\n[45,]      5.1      3.8      1.9      0.4\n[46,]      4.8      3.0      1.4      0.3\n[47,]      5.1      3.8      1.6      0.2\n[48,]      4.6      3.2      1.4      0.2\n[49,]      5.3      3.7      1.5      0.2\n[50,]      5.0      3.3      1.4      0.2\n\n, , Versicolor\n\n      Sepal L. Sepal W. Petal L. Petal W.\n [1,]      7.0      3.2      4.7      1.4\n [2,]      6.4      3.2      4.5      1.5\n [3,]      6.9      3.1      4.9      1.5\n [4,]      5.5      2.3      4.0      1.3\n [5,]      6.5      2.8      4.6      1.5\n [6,]      5.7      2.8      4.5      1.3\n [7,]      6.3      3.3      4.7      1.6\n [8,]      4.9      2.4      3.3      1.0\n [9,]      6.6      2.9      4.6      1.3\n[10,]      5.2      2.7      3.9      1.4\n[11,]      5.0      2.0      3.5      1.0\n[12,]      5.9      3.0      4.2      1.5\n[13,]      6.0      2.2      4.0      1.0\n[14,]      6.1      2.9      4.7      1.4\n[15,]      5.6      2.9      3.6      1.3\n[16,]      6.7      3.1      4.4      1.4\n[17,]      5.6      3.0      4.5      1.5\n[18,]      5.8      2.7      4.1      1.0\n[19,]      6.2      2.2      4.5      1.5\n[20,]      5.6      2.5      3.9      1.1\n[21,]      5.9      3.2      4.8      1.8\n[22,]      6.1      2.8      4.0      1.3\n[23,]      6.3      2.5      4.9      1.5\n[24,]      6.1      2.8      4.7      1.2\n[25,]      6.4      2.9      4.3      1.3\n[26,]      6.6      3.0      4.4      1.4\n[27,]      6.8      2.8      4.8      1.4\n[28,]      6.7      3.0      5.0      1.7\n[29,]      6.0      2.9      4.5      1.5\n[30,]      5.7      2.6      3.5      1.0\n[31,]      5.5      2.4      3.8      1.1\n[32,]      5.5      2.4      3.7      1.0\n[33,]      5.8      2.7      3.9      1.2\n[34,]      6.0      2.7      5.1      1.6\n[35,]      5.4      3.0      4.5      1.5\n[36,]      6.0      3.4      4.5      1.6\n[37,]      6.7      3.1      4.7      1.5\n[38,]      6.3      2.3      4.4      1.3\n[39,]      5.6      3.0      4.1      1.3\n[40,]      5.5      2.5      4.0      1.3\n[41,]      5.5      2.6      4.4      1.2\n[42,]      6.1      3.0      4.6      1.4\n[43,]      5.8      2.6      4.0      1.2\n[44,]      5.0      2.3      3.3      1.0\n[45,]      5.6      2.7      4.2      1.3\n[46,]      5.7      3.0      4.2      1.2\n[47,]      5.7      2.9      4.2      1.3\n[48,]      6.2      2.9      4.3      1.3\n[49,]      5.1      2.5      3.0      1.1\n[50,]      5.7      2.8      4.1      1.3\n\n, , Virginica\n\n      Sepal L. Sepal W. Petal L. Petal W.\n [1,]      6.3      3.3      6.0      2.5\n [2,]      5.8      2.7      5.1      1.9\n [3,]      7.1      3.0      5.9      2.1\n [4,]      6.3      2.9      5.6      1.8\n [5,]      6.5      3.0      5.8      2.2\n [6,]      7.6      3.0      6.6      2.1\n [7,]      4.9      2.5      4.5      1.7\n [8,]      7.3      2.9      6.3      1.8\n [9,]      6.7      2.5      5.8      1.8\n[10,]      7.2      3.6      6.1      2.5\n[11,]      6.5      3.2      5.1      2.0\n[12,]      6.4      2.7      5.3      1.9\n[13,]      6.8      3.0      5.5      2.1\n[14,]      5.7      2.5      5.0      2.0\n[15,]      5.8      2.8      5.1      2.4\n[16,]      6.4      3.2      5.3      2.3\n[17,]      6.5      3.0      5.5      1.8\n[18,]      7.7      3.8      6.7      2.2\n[19,]      7.7      2.6      6.9      2.3\n[20,]      6.0      2.2      5.0      1.5\n[21,]      6.9      3.2      5.7      2.3\n[22,]      5.6      2.8      4.9      2.0\n[23,]      7.7      2.8      6.7      2.0\n[24,]      6.3      2.7      4.9      1.8\n[25,]      6.7      3.3      5.7      2.1\n[26,]      7.2      3.2      6.0      1.8\n[27,]      6.2      2.8      4.8      1.8\n[28,]      6.1      3.0      4.9      1.8\n[29,]      6.4      2.8      5.6      2.1\n[30,]      7.2      3.0      5.8      1.6\n[31,]      7.4      2.8      6.1      1.9\n[32,]      7.9      3.8      6.4      2.0\n[33,]      6.4      2.8      5.6      2.2\n[34,]      6.3      2.8      5.1      1.5\n[35,]      6.1      2.6      5.6      1.4\n[36,]      7.7      3.0      6.1      2.3\n[37,]      6.3      3.4      5.6      2.4\n[38,]      6.4      3.1      5.5      1.8\n[39,]      6.0      3.0      4.8      1.8\n[40,]      6.9      3.1      5.4      2.1\n[41,]      6.7      3.1      5.6      2.4\n[42,]      6.9      3.1      5.1      2.3\n[43,]      5.8      2.7      5.1      1.9\n[44,]      6.8      3.2      5.9      2.3\n[45,]      6.7      3.3      5.7      2.5\n[46,]      6.7      3.0      5.2      2.3\n[47,]      6.3      2.5      5.0      1.9\n[48,]      6.5      3.0      5.2      2.0\n[49,]      6.2      3.4      5.4      2.3\n[50,]      5.9      3.0      5.1      1.8\n\n\n\n\n(r-&gt;clj '(attributes iris3))\n\n\n{:dim [50 4 3],\n :dimnames\n [nil\n  [\"Sepal L.\" \"Sepal W.\" \"Petal L.\" \"Petal W.\"]\n  [\"Setosa\" \"Versicolor\" \"Virginica\"]]}\n\n\n(r-&gt;clj r.datasets/iris3)\n\n\n_unnamed [150 5]:\n\n\n\n:$col-0\nSepal L.\nSepal W.\nPetal L.\nPetal W.\n\n\n\n\nSetosa\n5.1\n3.5\n1.4\n0.2\n\n\nSetosa\n4.9\n3.0\n1.4\n0.2\n\n\nSetosa\n4.7\n3.2\n1.3\n0.2\n\n\nSetosa\n4.6\n3.1\n1.5\n0.2\n\n\nSetosa\n5.0\n3.6\n1.4\n0.2\n\n\nSetosa\n5.4\n3.9\n1.7\n0.4\n\n\nSetosa\n4.6\n3.4\n1.4\n0.3\n\n\nSetosa\n5.0\n3.4\n1.5\n0.2\n\n\nSetosa\n4.4\n2.9\n1.4\n0.2\n\n\nSetosa\n4.9\n3.1\n1.5\n0.1\n\n\n…\n…\n…\n…\n…\n\n\nVirginica\n6.9\n3.1\n5.4\n2.1\n\n\nVirginica\n6.7\n3.1\n5.6\n2.4\n\n\nVirginica\n6.9\n3.1\n5.1\n2.3\n\n\nVirginica\n5.8\n2.7\n5.1\n1.9\n\n\nVirginica\n6.8\n3.2\n5.9\n2.3\n\n\nVirginica\n6.7\n3.3\n5.7\n2.5\n\n\nVirginica\n6.7\n3.0\n5.2\n2.3\n\n\nVirginica\n6.3\n2.5\n5.0\n1.9\n\n\nVirginica\n6.5\n3.0\n5.2\n2.0\n\n\nVirginica\n6.2\n3.4\n5.4\n2.3\n\n\nVirginica\n5.9\n3.0\n5.1\n1.8\n\n\n\n\n\n(def array-5d (r '(array ~(range 60) :dim [2 5 1 3 2])))\n\n\narray-5d\n\n\n, , 1, 1, 1\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    2    4    6    8\n[2,]    1    3    5    7    9\n\n, , 1, 2, 1\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   10   12   14   16   18\n[2,]   11   13   15   17   19\n\n, , 1, 3, 1\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   20   22   24   26   28\n[2,]   21   23   25   27   29\n\n, , 1, 1, 2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   30   32   34   36   38\n[2,]   31   33   35   37   39\n\n, , 1, 2, 2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   40   42   44   46   48\n[2,]   41   43   45   47   49\n\n, , 1, 3, 2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   50   52   54   56   58\n[2,]   51   53   55   57   59\n\n\n\n\n(r-&gt;clj '(attributes ~array-5d))\n\n\n{:dim [2 5 1 3 2]}\n\n\n(r-&gt;clj array-5d)\n\n\n_unnamed [12 8]:\n\n\n\n:\\(col-0 | :\\)col-1\n:$col-2\n1\n2\n3\n4\n5\n\n\n\n\n\n1\n1\n1\n0\n2\n4\n6\n8\n\n\n1\n1\n1\n1\n3\n5\n7\n9\n\n\n1\n1\n2\n10\n12\n14\n16\n18\n\n\n1\n1\n2\n11\n13\n15\n17\n19\n\n\n1\n2\n1\n20\n22\n24\n26\n28\n\n\n1\n2\n1\n21\n23\n25\n27\n29\n\n\n1\n2\n2\n30\n32\n34\n36\n38\n\n\n1\n2\n2\n31\n33\n35\n37\n39\n\n\n1\n3\n1\n40\n42\n44\n46\n48\n\n\n1\n3\n1\n41\n43\n45\n47\n49\n\n\n1\n3\n2\n50\n52\n54\n56\n58\n\n\n1\n3\n2\n51\n53\n55\n57\n59",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#d-timeseries",
    "href": "clojisr.v1.tutorials.dataset.html#d-timeseries",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "4.4 1D timeseries",
    "text": "4.4 1D timeseries\nTimeseries are stored in two columns:\n\n:$time - to store time identifier as double *:$series - to store timeseries\n\n\nr.datasets/BJsales\n\n\nTime Series:\nStart = 1 \nEnd = 150 \nFrequency = 1 \n  [1] 200.1 199.5 199.4 198.9 199.0 200.2 198.6 200.0 200.3 201.2 201.6 201.5\n [13] 201.5 203.5 204.9 207.1 210.5 210.5 209.8 208.8 209.5 213.2 213.7 215.1\n [25] 218.7 219.8 220.5 223.8 222.8 223.8 221.7 222.3 220.8 219.4 220.1 220.6\n [37] 218.9 217.8 217.7 215.0 215.3 215.9 216.7 216.7 217.7 218.7 222.9 224.9\n [49] 222.2 220.7 220.0 218.7 217.0 215.9 215.8 214.1 212.3 213.9 214.6 213.6\n [61] 212.1 211.4 213.1 212.9 213.3 211.5 212.3 213.0 211.0 210.7 210.1 211.4\n [73] 210.0 209.7 208.8 208.8 208.8 210.6 211.9 212.8 212.5 214.8 215.3 217.5\n [85] 218.8 220.7 222.2 226.7 228.4 233.2 235.7 237.1 240.6 243.8 245.3 246.0\n [97] 246.3 247.7 247.6 247.8 249.4 249.0 249.9 250.5 251.5 249.0 247.6 248.8\n[109] 250.4 250.7 253.0 253.7 255.0 256.2 256.0 257.4 260.4 260.0 261.3 260.4\n[121] 261.6 260.8 259.8 259.0 258.9 257.4 257.7 257.9 257.4 257.3 257.6 258.9\n[133] 257.8 257.7 257.2 257.5 256.8 257.5 257.0 257.6 257.3 257.5 259.6 261.1\n[145] 262.9 263.3 262.8 261.8 262.2 262.7\n\n\n\n(r-&gt;clj '(attributes BJsales))\n\n\n{:tsp [1.0 150.0 1.0], :class [\"ts\"]}\n\n\n(r-&gt;clj r.datasets/BJsales)\n\n\n_unnamed [149 2]:\n\n\n\n:\\(time | :\\)series\n\n\n\n\n\n1.0\n200.1\n\n\n2.0\n199.5\n\n\n3.0\n199.4\n\n\n4.0\n198.9\n\n\n5.0\n199.0\n\n\n6.0\n200.2\n\n\n7.0\n198.6\n\n\n8.0\n200.0\n\n\n9.0\n200.3\n\n\n10.0\n201.2\n\n\n…\n…\n\n\n139.0\n257.0\n\n\n140.0\n257.6\n\n\n141.0\n257.3\n\n\n142.0\n257.5\n\n\n143.0\n259.6\n\n\n144.0\n261.1\n\n\n145.0\n262.9\n\n\n146.0\n263.3\n\n\n147.0\n262.8\n\n\n148.0\n261.8\n\n\n149.0\n262.2",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#multidimensional-timeseries",
    "href": "clojisr.v1.tutorials.dataset.html#multidimensional-timeseries",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "4.5 Multidimensional timeseries",
    "text": "4.5 Multidimensional timeseries\n\n(r '(window EuStockMarkets :end [1991,155]))\n\n\nTime Series:\nStart = c(1991, 130) \nEnd = c(1991, 155) \nFrequency = 260 \n             DAX    SMI    CAC   FTSE\n1991.496 1628.75 1678.1 1772.8 2443.6\n1991.500 1613.63 1688.5 1750.5 2460.2\n1991.504 1606.51 1678.6 1718.0 2448.2\n1991.508 1621.04 1684.1 1708.1 2470.4\n1991.512 1618.16 1686.6 1723.1 2484.7\n1991.515 1610.61 1671.6 1714.3 2466.8\n1991.519 1630.75 1682.9 1734.5 2487.9\n1991.523 1640.17 1703.6 1757.4 2508.4\n1991.527 1635.47 1697.5 1754.0 2510.5\n1991.531 1645.89 1716.3 1754.3 2497.4\n1991.535 1647.84 1723.8 1759.8 2532.5\n1991.538 1638.35 1730.5 1755.5 2556.8\n1991.542 1629.93 1727.4 1758.1 2561.0\n1991.546 1621.49 1733.3 1757.5 2547.3\n1991.550 1624.74 1734.0 1763.5 2541.5\n1991.554 1627.63 1728.3 1762.8 2558.5\n1991.558 1631.99 1737.1 1768.9 2587.9\n1991.562 1621.18 1723.1 1778.1 2580.5\n1991.565 1613.42 1723.6 1780.1 2579.6\n1991.569 1604.95 1719.0 1767.7 2589.3\n1991.573 1605.75 1721.2 1757.9 2595.0\n1991.577 1616.67 1725.3 1756.6 2595.6\n1991.581 1619.29 1727.2 1754.7 2588.8\n1991.585 1620.49 1727.2 1766.8 2591.7\n1991.588 1619.67 1731.6 1766.5 2601.7\n1991.592 1623.07 1724.1 1762.2 2585.4\n\n\n\n(r-&gt;clj '(attributes EuStockMarkets))\n\n\n{:dim [1860 4],\n :dimnames [nil [\"DAX\" \"SMI\" \"CAC\" \"FTSE\"]],\n :tsp [1991.496153846154 1998.646153846154 260.0],\n :class [\"mts\" \"ts\" \"matrix\"]}\n\n\n(r-&gt;clj r.datasets/EuStockMarkets)\n\n\n_unnamed [1860 5]:\n\n\n\n:$time\nDAX\nSMI\nCAC\nFTSE\n\n\n\n\n1991.49615385\n1628.75\n1678.1\n1772.8\n2443.6\n\n\n1991.50000000\n1613.63\n1688.5\n1750.5\n2460.2\n\n\n1991.50384615\n1606.51\n1678.6\n1718.0\n2448.2\n\n\n1991.50769231\n1621.04\n1684.1\n1708.1\n2470.4\n\n\n1991.51153846\n1618.16\n1686.6\n1723.1\n2484.7\n\n\n1991.51538462\n1610.61\n1671.6\n1714.3\n2466.8\n\n\n1991.51923077\n1630.75\n1682.9\n1734.5\n2487.9\n\n\n1991.52307692\n1640.17\n1703.6\n1757.4\n2508.4\n\n\n1991.52692308\n1635.47\n1697.5\n1754.0\n2510.5\n\n\n1991.53076923\n1645.89\n1716.3\n1754.3\n2497.4\n\n\n…\n…\n…\n…\n…\n\n\n1998.60769231\n5861.19\n8239.5\n4177.3\n5837.0\n\n\n1998.61153846\n5774.38\n8139.2\n4095.0\n5809.7\n\n\n1998.61538462\n5718.70\n8170.2\n4047.9\n5736.1\n\n\n1998.61923077\n5614.77\n7943.2\n3976.4\n5632.5\n\n\n1998.62307692\n5528.12\n7846.2\n3968.6\n5594.1\n\n\n1998.62692308\n5598.32\n7952.9\n4041.9\n5680.4\n\n\n1998.63076923\n5460.43\n7721.3\n3939.5\n5587.6\n\n\n1998.63461538\n5285.78\n7447.9\n3846.0\n5432.8\n\n\n1998.63846154\n5386.94\n7607.5\n3945.7\n5462.2\n\n\n1998.64230769\n5355.03\n7552.6\n3951.7\n5399.5\n\n\n1998.64615385\n5473.72\n7676.3\n3995.0\n5455.0",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#datetime-columns",
    "href": "clojisr.v1.tutorials.dataset.html#datetime-columns",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "4.6 Datetime columns",
    "text": "4.6 Datetime columns\n\n(def dt (r \"\n   day &lt;- c(\\\"20081101\\\", \\\"20081101\\\", \\\"20081101\\\", \\\"20081101\\\", \\\"18081101\\\", \\\"20081102\\\", \\\"20081102\\\", \\\"20081102\\\", \\\"20081102\\\", \\\"20081103\\\")\n   time &lt;- c(\\\"01:20:00\\\", \\\"06:00:00\\\", \\\"12:20:00\\\", \\\"17:30:00\\\", \\\"21:45:00\\\", \\\"01:15:00\\\", \\\"06:30:00\\\", \\\"12:50:00\\\", \\\"20:00:00\\\", \\\"01:05:00\\\")\n   dts1 &lt;- paste(day, time)\n   dts2 &lt;- as.POSIXct(dts1, format = \\\"%Y%m%d %H:%M:%S\\\")\n   dts3 &lt;- as.POSIXlt(dts1, format = \\\"%Y%m%d %H:%M:%S\\\")\n   dts &lt;- data.frame(posixct=dts2, posixlt=dts3)\"))\n\n\ndt\n\n\n               posixct             posixlt\n1  2008-11-01 01:20:00 2008-11-01 01:20:00\n2  2008-11-01 06:00:00 2008-11-01 06:00:00\n3  2008-11-01 12:20:00 2008-11-01 12:20:00\n4  2008-11-01 17:30:00 2008-11-01 17:30:00\n5  1808-11-01 21:45:00 1808-11-01 21:45:00\n6  2008-11-02 01:15:00 2008-11-02 01:15:00\n7  2008-11-02 06:30:00 2008-11-02 06:30:00\n8  2008-11-02 12:50:00 2008-11-02 12:50:00\n9  2008-11-02 20:00:00 2008-11-02 20:00:00\n10 2008-11-03 01:05:00 2008-11-03 01:05:00\n\n\n\n(r-&gt;clj '(attributes ~dt))\n\n\n{:names [\"posixct\" \"posixlt\"],\n :class [\"data.frame\"],\n :row.names [1 2 3 4 5 6 7 8 9 10]}\n\n\n(r-&gt;clj dt)\n\n\n_unnamed [10 2]:\n\n\n\n:posixct\n:posixlt\n\n\n\n\n2008-11-01T01:20\n2008-11-01T01:20\n\n\n2008-11-01T06:00\n2008-11-01T06:00\n\n\n2008-11-01T12:20\n2008-11-01T12:20\n\n\n2008-11-01T17:30\n2008-11-01T17:30\n\n\n1808-11-01T21:45\n1808-11-01T21:45\n\n\n2008-11-02T01:15\n2008-11-02T01:15\n\n\n2008-11-02T06:30\n2008-11-02T06:30\n\n\n2008-11-02T12:50\n2008-11-02T12:50\n\n\n2008-11-02T20:00\n2008-11-02T20:00\n\n\n2008-11-03T01:05\n2008-11-03T01:05",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#distances",
    "href": "clojisr.v1.tutorials.dataset.html#distances",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "4.7 Distances",
    "text": "4.7 Distances\n\nr.datasets/UScitiesD\n\n\n              Atlanta Chicago Denver Houston LosAngeles Miami NewYork\nChicago           587                                                \nDenver           1212     920                                        \nHouston           701     940    879                                 \nLosAngeles       1936    1745    831    1374                         \nMiami             604    1188   1726     968       2339              \nNewYork           748     713   1631    1420       2451  1092        \nSanFrancisco     2139    1858    949    1645        347  2594    2571\nSeattle          2182    1737   1021    1891        959  2734    2408\nWashington.DC     543     597   1494    1220       2300   923     205\n              SanFrancisco Seattle\nChicago                           \nDenver                            \nHouston                           \nLosAngeles                        \nMiami                             \nNewYork                           \nSanFrancisco                      \nSeattle                678        \nWashington.DC         2442    2329\n\n\n\n(r-&gt;clj '(attributes UScitiesD))\n\n\n{:Labels\n [\"Atlanta\"\n  \"Chicago\"\n  \"Denver\"\n  \"Houston\"\n  \"LosAngeles\"\n  \"Miami\"\n  \"NewYork\"\n  \"SanFrancisco\"\n  \"Seattle\"\n  \"Washington.DC\"],\n :Size [10],\n :call {0 as.dist.default, :m [t cities.mat]},\n :class [\"dist\"],\n :Diag [false],\n :Upper [false]}\n\n\n(r-&gt;clj r.datasets/UScitiesD)\n\n\n_unnamed [10 11]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:$row.names\nAtlanta\nChicago\nDenver\nHouston\nLosAngeles\nMiami\nNewYork\nSanFrancisco\nSeattle\nWashington.DC\n\n\n\n\nAtlanta\n0\n587\n1212\n701\n1936\n604\n748\n2139\n2182\n543\n\n\nChicago\n587\n0\n920\n940\n1745\n1188\n713\n1858\n1737\n597\n\n\nDenver\n1212\n920\n0\n879\n831\n1726\n1631\n949\n1021\n1494\n\n\nHouston\n701\n940\n879\n0\n1374\n968\n1420\n1645\n1891\n1220\n\n\nLosAngeles\n1936\n1745\n831\n1374\n0\n2339\n2451\n347\n959\n2300\n\n\nMiami\n604\n1188\n1726\n968\n2339\n0\n1092\n2594\n2734\n923\n\n\nNewYork\n748\n713\n1631\n1420\n2451\n1092\n0\n2571\n2408\n205\n\n\nSanFrancisco\n2139\n1858\n949\n1645\n347\n2594\n2571\n0\n678\n2442\n\n\nSeattle\n2182\n1737\n1021\n1891\n959\n2734\n2408\n678\n0\n2329\n\n\nWashington.DC\n543\n597\n1494\n1220\n2300\n923\n205\n2442\n2329\n0",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#other",
    "href": "clojisr.v1.tutorials.dataset.html#other",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "4.8 Other",
    "text": "4.8 Other\n\n4.8.1 List\n\nr.datasets/Harman23-cor\n\n\n$cov\n               height arm.span forearm lower.leg weight bitro.diameter\nheight          1.000    0.846   0.805     0.859  0.473          0.398\narm.span        0.846    1.000   0.881     0.826  0.376          0.326\nforearm         0.805    0.881   1.000     0.801  0.380          0.319\nlower.leg       0.859    0.826   0.801     1.000  0.436          0.329\nweight          0.473    0.376   0.380     0.436  1.000          0.762\nbitro.diameter  0.398    0.326   0.319     0.329  0.762          1.000\nchest.girth     0.301    0.277   0.237     0.327  0.730          0.583\nchest.width     0.382    0.415   0.345     0.365  0.629          0.577\n               chest.girth chest.width\nheight               0.301       0.382\narm.span             0.277       0.415\nforearm              0.237       0.345\nlower.leg            0.327       0.365\nweight               0.730       0.629\nbitro.diameter       0.583       0.577\nchest.girth          1.000       0.539\nchest.width          0.539       1.000\n\n$center\n[1] 0 0 0 0 0 0 0 0\n\n$n.obs\n[1] 305\n\n\n\n\n(r-&gt;clj '(attributes Harman23.cor))\n\n\n{:names [\"cov\" \"center\" \"n.obs\"]}\n\n\n(r-&gt;clj r.datasets/Harman23-cor)\n\n\n{:cov\n [1.0\n  0.846\n  0.805\n  0.859\n  0.473\n  0.398\n  0.301\n  0.382\n  0.846\n  1.0\n  0.881\n  0.826\n  0.376\n  0.326\n  0.277\n  0.415\n  0.805\n  0.881\n  1.0\n  0.801\n  0.38\n  0.319\n  0.237\n  0.345\n  0.859\n  0.826\n  0.801\n  1.0\n  0.436\n  0.329\n  0.327\n  0.365\n  0.473\n  0.376\n  0.38\n  0.436\n  1.0\n  0.762\n  0.73\n  0.629\n  0.398\n  0.326\n  0.319\n  0.329\n  0.762\n  1.0\n  0.583\n  0.577\n  0.301\n  0.277\n  0.237\n  0.327\n  0.73\n  0.583\n  1.0\n  0.539\n  0.382\n  0.415\n  0.345\n  0.365\n  0.629\n  0.577\n  0.539\n  1.0],\n :center [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0],\n :n.obs [305.0]}\n\n\n\n4.8.2 Partially named list\n\n(def pnl (r '[:!list :a 112 \"abc\" \"cde\" :b \"qwe\"]))\n\n\npnl\n\n\n$a\n[1] 112\n\n[[2]]\n[1] \"abc\"\n\n[[3]]\n[1] \"cde\"\n\n$b\n[1] \"qwe\"\n\n\n\n\n(r-&gt;clj '(attributes ~pnl))\n\n\n{:names [\"a\" \"\" \"\" \"b\"]}\n\n\n(r-&gt;clj pnl)\n\n\n{:a [112], 1 [\"abc\"], 2 [\"cde\"], :b [\"qwe\"]}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.dataset.html#dataset---r",
    "href": "clojisr.v1.tutorials.dataset.html#dataset---r",
    "title": "4  Dataset transfer from R to Clojure",
    "section": "4.9 Dataset -> R",
    "text": "4.9 Dataset -&gt; R\nEvery dataset is converted to data.frame object.\n\n(clj-&gt;r (r-&gt;clj r.datasets/UScitiesD))\n\n\n              Atlanta Chicago Denver Houston LosAngeles Miami NewYork\nAtlanta             0     587   1212     701       1936   604     748\nChicago           587       0    920     940       1745  1188     713\nDenver           1212     920      0     879        831  1726    1631\nHouston           701     940    879       0       1374   968    1420\nLosAngeles       1936    1745    831    1374          0  2339    2451\nMiami             604    1188   1726     968       2339     0    1092\nNewYork           748     713   1631    1420       2451  1092       0\nSanFrancisco     2139    1858    949    1645        347  2594    2571\nSeattle          2182    1737   1021    1891        959  2734    2408\nWashington.DC     543     597   1494    1220       2300   923     205\n              SanFrancisco Seattle Washington.DC\nAtlanta               2139    2182           543\nChicago               1858    1737           597\nDenver                 949    1021          1494\nHouston               1645    1891          1220\nLosAngeles             347     959          2300\nMiami                 2594    2734           923\nNewYork               2571    2408           205\nSanFrancisco             0     678          2442\nSeattle                678       0          2329\nWashington.DC         2442    2329             0\n\n\n\nsource: notebooks/clojisr/v1/tutorials/dataset.clj",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataset transfer from R to Clojure</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html",
    "href": "clojisr.v1.tutorials.titanic0.html",
    "title": "5  ClojisR example: Titanic #0",
    "section": "",
    "text": "5.1 Bringing the neecessary R functions\nHere are most of the functions that we need, brought by the standard require-r mechanism, inspired by libpython-clj’s require-python (though not as sophisticated at the moment). In function names, dots are changed to hyphens.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#bringing-the-neecessary-r-functions",
    "href": "clojisr.v1.tutorials.titanic0.html#bringing-the-neecessary-r-functions",
    "title": "5  ClojisR example: Titanic #0",
    "section": "",
    "text": "(require\n '[clojisr.v1.r :as r\n   :refer [r r-&gt;clj\n           r== r!= r&lt; r&gt; r&lt;= r&gt;= r& r&& r| r||\n           str-md\n           r+\n           bra bra&lt;- brabra brabra&lt;- colon\n           require-r]]\n '[clojisr.v1.applications.plotting :refer [plot-&gt;svg]]\n '[clojure.string :as string]\n '[clojure.java.io :as io])\n\n\n(r/set-default-session-type! :rserve)\n\n\n{:session-type :rserve}\n\n\n(r/discard-all-sessions)\n\n\n{}\n\n\n(require-r\n '[base :refer [round names ! set-seed sum which rnorm lapply sapply %in% table list-files c paste colnames row-names cbind gsub &lt;- $ $&lt;- as-data-frame data-frame nlevels factor expression is-na strsplit as-character summary table]]\n '[stats :refer [median predict]]\n '[ggplot2 :refer [ggsave qplot ggplot aes facet_grid geom_density geom_text geom_histogram geom_bar scale_x_continuous scale_y_continuous labs coord_flip geom_vline geom_hline geom_boxplot]]\n '[ggthemes :refer [theme_few]]\n '[scales :refer [dollar_format]]\n '[graphics :refer [par plot hist dev-off legend]]\n '[dplyr :refer [mutate bind_rows summarise group_by]]\n '[utils :refer [read-csv write-csv head]]\n '[mice :refer [mice complete]]\n '[randomForest :refer [randomForest importance]])\n\n\nnil",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#introduction-prediction-of-titanic-survival-using-random-forest",
    "href": "clojisr.v1.tutorials.titanic0.html#introduction-prediction-of-titanic-survival-using-random-forest",
    "title": "5  ClojisR example: Titanic #0",
    "section": "5.2 Introduction – Prediction of Titanic Survival using Random Forest",
    "text": "5.2 Introduction – Prediction of Titanic Survival using Random Forest\nPradeep Tripathi’s solution will use randomForest to create a model predicting survival on the Titanic.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#reading-test-and-train-data",
    "href": "clojisr.v1.tutorials.titanic0.html#reading-test-and-train-data",
    "title": "5  ClojisR example: Titanic #0",
    "section": "5.3 Reading test and train data",
    "text": "5.3 Reading test and train data\nThis step assumes that the Titanic data lies under the resources/data/ path under your Clojure project.\n\n(def data-path\n  (-&gt; (io/resource \"data/titanic\")\n      (io/file)\n      (.getAbsolutePath)\n      (str \"/\")))\n\n# Original code:\nlist.files('../input')\n\n(list-files data-path)\n\n\n[1] \"test.csv.gz\"  \"train.csv.gz\"\n\n\n# Original code:\ntrain &lt;-read.csv('../input/train.csv', stringsAsFactors = F)\ntest  &lt;-read.csv('../input/test.csv', stringsAsFactors = F)\n\n(def train (read-csv\n            (str data-path \"train.csv.gz\")\n            :stringsAsFactors false))\n\n\n(def test (read-csv\n            (str data-path \"test.csv.gz\")\n            :stringsAsFactors false))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#combining-test-and-train-data",
    "href": "clojisr.v1.tutorials.titanic0.html#combining-test-and-train-data",
    "title": "5  ClojisR example: Titanic #0",
    "section": "5.4 Combining test and train data",
    "text": "5.4 Combining test and train data\nAs explained by Thripathi, the Random Forest algorithm will use the Bagging method to create multiple random samples with replacement from the dataset, that will be treated as training data, while the out of bag samples will be treated as test data.\n# Original code:\ntitanic&lt;-bind_rows(train,test)\n\n(def titanic\n  (bind_rows train test))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#data-check",
    "href": "clojisr.v1.tutorials.titanic0.html#data-check",
    "title": "5  ClojisR example: Titanic #0",
    "section": "5.5 Data check",
    "text": "5.5 Data check\n# Original code:\nstr(titanic)\nsummary(titanic)\nhead(titanic)\n\n(kind/md\n (str-md titanic))\n\n'data.frame':   1309 obs. of  12 variables:\n $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...\n $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...\n $ Name       : chr  \"Braund, Mr. Owen Harris\" \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\" \"Heikkinen, Miss. Laina\" \"Futrelle, Mrs. Jacques Heath (Lily May Peel)\" ...\n $ Sex        : chr  \"male\" \"female\" \"female\" \"female\" ...\n $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n $ Ticket     : chr  \"A/5 21171\" \"PC 17599\" \"STON/O2. 3101282\" \"113803\" ...\n $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n $ Cabin      : chr  \"\" \"C85\" \"\" \"C123\" ...\n $ Embarked   : chr  \"S\" \"C\" \"S\" \"S\" ...\n\n(summary titanic)\n\n\n  PassengerId      Survived          Pclass          Name          \n Min.   :   1   Min.   :0.0000   Min.   :1.000   Length:1309       \n 1st Qu.: 328   1st Qu.:0.0000   1st Qu.:2.000   Class :character  \n Median : 655   Median :0.0000   Median :3.000   Mode  :character  \n Mean   : 655   Mean   :0.3838   Mean   :2.295                     \n 3rd Qu.: 982   3rd Qu.:1.0000   3rd Qu.:3.000                     \n Max.   :1309   Max.   :1.0000   Max.   :3.000                     \n                NA's   :418                                        \n     Sex                 Age            SibSp            Parch      \n Length:1309        Min.   : 0.17   Min.   :0.0000   Min.   :0.000  \n Class :character   1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.000  \n Mode  :character   Median :28.00   Median :0.0000   Median :0.000  \n                    Mean   :29.88   Mean   :0.4989   Mean   :0.385  \n                    3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.000  \n                    Max.   :80.00   Max.   :8.0000   Max.   :9.000  \n                    NA's   :263                                     \n    Ticket               Fare            Cabin             Embarked        \n Length:1309        Min.   :  0.000   Length:1309        Length:1309       \n Class :character   1st Qu.:  7.896   Class :character   Class :character  \n Mode  :character   Median : 14.454   Mode  :character   Mode  :character  \n                    Mean   : 33.295                                        \n                    3rd Qu.: 31.275                                        \n                    Max.   :512.329                                        \n                    NA's   :1                                              \n\n\n\n(head titanic)\n\n\n  PassengerId Survived Pclass\n1           1        0      3\n2           2        1      1\n3           3        1      3\n4           4        1      1\n5           5        0      3\n6           6        0      3\n                                                 Name    Sex Age SibSp Parch\n1                             Braund, Mr. Owen Harris   male  22     1     0\n2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0\n3                              Heikkinen, Miss. Laina female  26     0     0\n4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0\n5                            Allen, Mr. William Henry   male  35     0     0\n6                                    Moran, Mr. James   male  NA     0     0\n            Ticket    Fare Cabin Embarked\n1        A/5 21171  7.2500              S\n2         PC 17599 71.2833   C85        C\n3 STON/O2. 3101282  7.9250              S\n4           113803 53.1000  C123        S\n5           373450  8.0500              S\n6           330877  8.4583              Q\n\n\nTripathi: We’ve got a sense of our variables, their class type, 3 and the first few observations of each. We know we’re working with 1309 observations of 12 variables.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#feature-engineering",
    "href": "clojisr.v1.tutorials.titanic0.html#feature-engineering",
    "title": "5  ClojisR example: Titanic #0",
    "section": "5.6 Feature engineering",
    "text": "5.6 Feature engineering\nThripathi’s explanation: We can break down Passenger name into additional meaningful variables which can feed predictions or be used in the creation of additional new variables. For instance, passenger title is contained within the passenger name variable and we can use surname to represent families.\n# Original code:\ncolnames(titanic)\n\n(colnames titanic)\n\n\n [1] \"PassengerId\" \"Survived\"    \"Pclass\"      \"Name\"        \"Sex\"        \n [6] \"Age\"         \"SibSp\"       \"Parch\"       \"Ticket\"      \"Fare\"       \n[11] \"Cabin\"       \"Embarked\"   \n\n\nRetrieve title from passenger names\n# Original code:\ntitanic$title&lt;-gsub('(.*, )|(\\..*)', '', titanic$Name)\n\n(def titanic\n  ($&lt;- titanic 'title\n       (gsub \"(.*, )|(\\\\\\\\..*)\"\n             \"\"\n             ($ titanic 'Name))))\n\nShow title counts by sex\n# Original code:\ntable(titanic$Sex, titanic$title)\nClojisr can covert an R frequency table to a Clojure data structure:\n\n(-&gt; (table ($ titanic 'Sex)\n           ($ titanic 'title))\n    r-&gt;clj)\n\n\n_unnamed [36 3]:\n\n\n\n0\n1\n:$value\n\n\n\n\nfemale\nCapt\n0\n\n\nfemale\nCol\n1\n\n\nfemale\nDon\n0\n\n\nfemale\nDona\n4\n\n\nfemale\nDr\n0\n\n\nfemale\nJonkheer\n1\n\n\nfemale\nLady\n1\n\n\nfemale\nMajor\n0\n\n\nfemale\nMaster\n1\n\n\nfemale\nMiss\n7\n\n\n…\n…\n…\n\n\nmale\nMajor\n757\n\n\nmale\nMaster\n197\n\n\nmale\nMiss\n0\n\n\nmale\nMlle\n2\n\n\nmale\nMme\n0\n\n\nmale\nMr\n0\n\n\nmale\nMrs\n8\n\n\nmale\nMs\n0\n\n\nmale\nRev\n1\n\n\nmale\nSir\n1\n\n\nmale\nthe Countess\n0\n\n\n\n\nSometimes, it is convenient to first convert it to an R data frame:\n\n(as-data-frame\n (table ($ titanic 'Sex)\n        ($ titanic 'title)))\n\n\n     Var1         Var2 Freq\n1  female         Capt    0\n2    male         Capt    1\n3  female          Col    0\n4    male          Col    4\n5  female          Don    0\n6    male          Don    1\n7  female         Dona    1\n8    male         Dona    0\n9  female           Dr    1\n10   male           Dr    7\n11 female     Jonkheer    0\n12   male     Jonkheer    1\n13 female         Lady    1\n14   male         Lady    0\n15 female        Major    0\n16   male        Major    2\n17 female       Master    0\n18   male       Master   61\n19 female         Miss  260\n20   male         Miss    0\n21 female         Mlle    2\n22   male         Mlle    0\n23 female          Mme    1\n24   male          Mme    0\n25 female           Mr    0\n26   male           Mr  757\n27 female          Mrs  197\n28   male          Mrs    0\n29 female           Ms    2\n30   male           Ms    0\n31 female          Rev    0\n32   male          Rev    8\n33 female          Sir    0\n34   male          Sir    1\n35 female the Countess    1\n36   male the Countess    0\n\n\nSometimes, it is convenient to use the way R prints a frequency table.\n\n(table ($ titanic 'Sex)\n       ($ titanic 'title))\n\n\n        \n         Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs\n  female    0   0   0    1   1        0    1     0      0  260    2   1   0 197\n  male      1   4   1    0   7        1    0     2     61    0    0   0 757   0\n        \n          Ms Rev Sir the Countess\n  female   2   0   0            1\n  male     0   8   1            0\n\n\nConvert titles with low count into a new title, and rename/reassign Mlle, Ms and Mme.\n# Original code:\nunusual_title&lt;-c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',\n                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n(def unusual-title\n  [\"Dona\", \"Lady\", \"the Countess\",\"Capt\", \"Col\", \"Don\",\n   \"Dr\", \"Major\", \"Rev\", \"Sir\", \"Jonkheer\"])\n\n# Original code:\ntitanic$title[titanic$title=='Mlle']&lt;-'Miss'\ntitanic$title[titanic$title=='Ms']&lt;-'Miss'\ntitanic$title[titanic$title=='Mme']&lt;-'Mrs'\ntitanic$title[titanic$title %in% unusual_title]&lt;-'Unusual Title'\n\n(def titanic\n  (-&gt; titanic\n      (bra&lt;- (r== ($ titanic 'title) \"Mlle\")\n             \"title\"\n             \"Miss\")\n      (bra&lt;- (r== ($ titanic 'title) \"Ms\")\n             \"title\"\n             \"Miss\")\n      (bra&lt;- (r== ($ titanic 'title) \"Mme\")\n             \"title\"\n             \"Mrs\")\n      (bra&lt;- (%in% ($ titanic 'title) unusual-title)\n             \"title\"\n             \"Mrs\")))\n\nCheck the title count again:\n# Original code:\ntable(titanic$Sex, titanic$title)\ntrying again:\n\n(table ($ titanic 'Sex)\n       ($ titanic 'title))\n\n\n        \n         Master Miss  Mr Mrs\n  female      0  264   0 202\n  male       61    0 757  25\n\n\nCreate a variable which contain the surnames of passengers.\n# Original code:\ntitanic$surname&lt;-sapply(titanic$Name, function(x) strsplit(x,split='[,.]')[[1]][1])\nnlevels(factor(titanic$surname)) ## 875 unique surnames\n\n(def titanic\n  ($&lt;- titanic 'surname\n       (sapply ($ titanic 'Name)\n               (r '(function [x]\n                             (bra (brabra (strsplit x :split \"[,.]\") 1) 1))))))\n\n\n(-&gt; titanic\n    ($ 'surname)\n    factor\n    nlevels)\n\n\n[1] 875\n\n\nTripathi: Family size variable: We are going to create a variable “famsize” to know the number of family members. It includes number of sibling/number of parents and children+ passenger themselves\n# Original code:\ntitanic$famsize &lt;- titanic$SibSp + titanic$Parch + 1\n\n(def titanic\n  ($&lt;- titanic 'famsize\n       (r+ ($ titanic 'SibSp)\n           ($ titanic 'Parch)\n           1)))\n\nCreate a family variable:\n# Original code:\ntitanic$family &lt;- paste(titanic$surname, titanic$famsize, sep='_')\n\n(def titanic\n  ($&lt;- titanic 'family\n       (paste ($ titanic 'surname)\n              ($ titanic 'famsize)\n              :sep \"_\")))\n\nVisualize the relationship between family size & survival:\n ggplot(titanic[1:891,], aes(x = famsize, fill = factor(Survived))) +\n   geom_bar(stat='count', position='dodge') +\n   scale_x_continuous(breaks=c(1:11)) +\n   labs(x = 'Family Size') +\n   theme_few()\n\n(-&gt; titanic\n    (bra (colon 1 891)\n         nil)\n    (ggplot (aes :x 'famsize\n                 :fill '(factor Survived)))\n    (r+ (geom_bar :stat \"count\"\n                  :position \"dodge\")\n        (scale_x_continuous :breaks (colon 1 11))\n        (labs :x \"Family Size\")\n        (theme_few))\n    plot-&gt;svg)\n\n\n\n\n  \n\n\n\n  \n    \n  \n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n100\n200\n300\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nFamily Size\ncount\n\nfactor(Survived)\n\n\n\n\n0\n1\n\n\n\nTripathi: Explanation: We can see that there’s a survival penalty to single/alone, and those with family sizes above 4. We can collapse this variable into three levels which will be helpful since there are comparatively fewer large families.\nDiscretize family size:\n# Original code:\ntitanic$fsizeD[titanic$famsize == 1] &lt;- 'single'\ntitanic$fsizeD[titanic$famsize &lt; 5 & titanic$famsize&gt; 1] &lt;- 'small'\ntitanic$fsizeD[titanic$famsize&gt; 4] &lt;- 'large'\n\n(def titanic\n  (-&gt; titanic\n      (bra&lt;- (r== ($ titanic 'famsize) 1)\n             \"fsizeD\"\n             \"single\")\n      (bra&lt;- (r& (r&lt; ($ titanic 'famsize) 5)\n                 (r&gt; ($ titanic 'famsize) 1))\n             \"fsizeD\"\n             \"small\")\n      (bra&lt;- (r&gt; ($ titanic 'famsize) 4)\n             \"fsizeD\" \"large\")))\n\nLet us check if it makes sense:\n\n(-&gt; titanic\n    ($ 'fsizeD)\n    table)\n\n\n\n large single  small \n    82    790    437 \n\n\nAnd let us make sure there are no missing values:\n\n(-&gt; titanic\n    ($ 'fsizeD)\n    is-na\n    table)\n\n\n\nFALSE \n 1309 \n\n\nTripathi: There’s could be some useful information in the passenger cabin variable including about their deck, so Retrieve deck from Cabin variable.\n# Original code:\ntitanic$Cabin[1:28]\n\n(-&gt; titanic\n    (bra (colon 1 28)\n         \"Cabin\"))\n\n\n [1] \"\"            \"C85\"         \"\"            \"C123\"        \"\"           \n [6] \"\"            \"E46\"         \"\"            \"\"            \"\"           \n[11] \"G6\"          \"C103\"        \"\"            \"\"            \"\"           \n[16] \"\"            \"\"            \"\"            \"\"            \"\"           \n[21] \"\"            \"D56\"         \"\"            \"A6\"          \"\"           \n[26] \"\"            \"\"            \"C23 C25 C27\"\n\n\nThe first character is the deck:\n# Original code:\nstrsplit(titanic$Cabin[2], NULL) [[1]]\n\n(-&gt; titanic\n    ($ 'Cabin)\n    (bra 2)\n    (strsplit nil)\n    (brabra 1))\n\n\n[1] \"C\" \"8\" \"5\"\n\n\nDeck variable:\n# Original R code:\ntitanic$deck&lt;-factor(sapply(titanic$Cabin, function(x) strsplit(x, NULL)[[1]][1]))\n\n(def titanic\n  ($&lt;- titanic 'deck\n       (factor (sapply ($ titanic 'Cabin)\n                       '(function [x]\n                                  (bra (brabra (strsplit x nil) 1) 1))))))\n\nLet us check:\n\n(-&gt; titanic\n    ($ 'deck)\n    table)\n\n\n\n A  B  C  D  E  F  G  T \n22 65 94 46 41 21  5  1",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#missing-values",
    "href": "clojisr.v1.tutorials.titanic0.html#missing-values",
    "title": "5  ClojisR example: Titanic #0",
    "section": "5.7 Missing values",
    "text": "5.7 Missing values\nupdated summary\n\n(summary titanic)\n\n\n  PassengerId      Survived          Pclass          Name          \n Min.   :   1   Min.   :0.0000   Min.   :1.000   Length:1309       \n 1st Qu.: 328   1st Qu.:0.0000   1st Qu.:2.000   Class :character  \n Median : 655   Median :0.0000   Median :3.000   Mode  :character  \n Mean   : 655   Mean   :0.3838   Mean   :2.295                     \n 3rd Qu.: 982   3rd Qu.:1.0000   3rd Qu.:3.000                     \n Max.   :1309   Max.   :1.0000   Max.   :3.000                     \n                NA's   :418                                        \n     Sex                 Age            SibSp            Parch      \n Length:1309        Min.   : 0.17   Min.   :0.0000   Min.   :0.000  \n Class :character   1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.000  \n Mode  :character   Median :28.00   Median :0.0000   Median :0.000  \n                    Mean   :29.88   Mean   :0.4989   Mean   :0.385  \n                    3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.000  \n                    Max.   :80.00   Max.   :8.0000   Max.   :9.000  \n                    NA's   :263                                     \n    Ticket               Fare            Cabin             Embarked        \n Length:1309        Min.   :  0.000   Length:1309        Length:1309       \n Class :character   1st Qu.:  7.896   Class :character   Class :character  \n Mode  :character   Median : 14.454   Mode  :character   Mode  :character  \n                    Mean   : 33.295                                        \n                    3rd Qu.: 31.275                                        \n                    Max.   :512.329                                        \n                    NA's   :1                                              \n    title             surname             famsize          family         \n Length:1309        Length:1309        Min.   : 1.000   Length:1309       \n Class :character   Class :character   1st Qu.: 1.000   Class :character  \n Mode  :character   Mode  :character   Median : 1.000   Mode  :character  \n                                       Mean   : 1.884                     \n                                       3rd Qu.: 2.000                     \n                                       Max.   :11.000                     \n                                                                          \n    fsizeD               deck     \n Length:1309        C      :  94  \n Class :character   B      :  65  \n Mode  :character   D      :  46  \n                    E      :  41  \n                    A      :  22  \n                    (Other):  27  \n                    NA's   :1014  \n\n\nThripathi’s explanation, following the summary: - Age : 263 missing values - Fare : 1 missing values - Embarked : 2 missing values - survived:too many - Cabin : too many\nMissing value in Embarkment – Tripathi: Now we will explore missing values and rectify it through imputation. There are a number of different ways we could go about doing this. Given the small size of the dataset, we probably should not opt for deleting either entire observations (rows) or variables (columns) containing missing values. We’re left with the option of replacing missing values with sensible values given the distribution of the data, e.g., the mean, median or mode.\nTo know which passengers have no listed embarkment port:\n# Original code:\ntitanic$Embarked[titanic$Embarked == \"\"] &lt;- NA\ntitanic[(which(is.na(titanic$Embarked))), 1]\nMarking as missing:\n\n(def titanic\n  (bra&lt;- titanic\n         (r== ($ titanic 'Embarked) \"\")\n         \"Embarked\"\n         'NA))\n\nChecking which has missing port:\n\n(-&gt; titanic\n    (bra (-&gt; titanic\n             ($ 'Embarked)\n             is-na\n             which)\n         1))\n\n\n[1]  62 830\n\n\nTripathi: Passengers 62 and 830 are missing Embarkment.\n# Original code:\ntitanic[c(62, 830), 'Embarked']\n\n(-&gt; titanic\n    (bra [62 830]\n         \"Embarked\"))\n\n\n[1] NA NA\n\n\nTripathi: So Passenger numbers 62 and 830 are each missing their embarkment ports. Let’s look at their class of ticket and their fare.\n# Original code:\ntitanic[c(62, 830), c(1,3,10)]\n\n(-&gt; titanic\n    (bra [62 830]\n         [1 3 10]))\n\n\n    PassengerId Pclass Fare\n62           62      1   80\n830         830      1   80\n\n\nAlternatively:\n\n(-&gt; titanic\n    (bra [62 830]\n         [\"PassengerId\" \"Pclass\" \"Fare\"]))\n\n\n    PassengerId Pclass Fare\n62           62      1   80\n830         830      1   80\n\n\nThripathi’s explanation: Both passengers had first class tickets that they spent 80 (pounds?) on. Let’s see the embarkment ports of others who bought similar kinds of tickets.\nFirst way of handling missing value in Embarked:\n# Original code:\ntitanic%&gt;%\n  group_by(Embarked, Pclass) %&gt;%\n  filter(Pclass == \"1\") %&gt;%\n  filter(Pclass == \"1\") %&gt;%\n  filter(Pclass == \"1\") %&gt;%\n  summarise(mfare = median(Fare),n = n())\n\n(-&gt; titanic\n    (group_by 'Embarked 'Pclass)\n    (r.dplyr/filter '(== Pclass \"1\"))\n    (summarise :mfare '(median Fare)\n               :n '(n)))\n\n\n# A tibble: 4 × 4\n# Groups:   Embarked [4]\n  Embarked Pclass mfare     n\n  &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n1 C             1  76.7   141\n2 Q             1  90       3\n3 S             1  52     177\n4 &lt;NA&gt;          1  80       2\n\n\nTripathi: Looks like the median price for a first class ticket departing from ‘C’ (Charbourg) was 77 (in comparison to our 80). While first class tickets departing from ‘Q’ were only slightly more expensiive (median price 90), only 3 first class passengers departed from that port. It seems far more likely that passengers 62 and 830 departed with the other 141 first-class passengers from Charbourg.\nSecond Way of handling missing value in Embarked:\n# Original code:\nembark_fare &lt;- titanic %&gt;%\n  filter(PassengerId != 62 & PassengerId != 830)\nembark_fare\n\n(def embark_fare\n  (-&gt; titanic\n      (r.dplyr/filter '(& (!= PassengerId 62)\n                          (!= PassengerId 830)))))\n\nUse ggplot2 to visualize embarkment, passenger class, & median fare:\n# Original code:\nggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\ngeom_boxplot() +\ngeom_hline(aes(yintercept=80),\n              colour='red', linetype='dashed', lwd=2) +\nscale_y_continuous(labels=dollar_format()) +\ntheme_few()\n\n(-&gt; embark_fare\n    (ggplot (aes :x 'Embarked\n                 :y 'Fare\n                 :fill '(factor Pclass)))\n    (r+ (geom_boxplot)\n        (geom_hline (aes :yintercept 80)\n                    :colour \"red\"\n                    :linetype \"dashed\"\n                    :lwd 2)\n        (scale_y_continuous :labels (dollar_format)))\n    plot-&gt;svg)\n\n\n\n\n  \n\n\n\n  \n    \n  \n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$0\n$100\n$200\n$300\n$400\n$500\n\n\n\n\n\n\n\n\n\nC\nQ\nS\nEmbarked\nFare\n\nfactor(Pclass)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\nTripathi: From plot we can see that The median fare for a first class passenger departing from Charbourg (‘C’) coincides nicely with the $80 paid by our embarkment-deficient passengers. I think we can safely replace the NA values with ‘C’. Since their fare was $80 for 1st class, they most likely embarked from ‘C’.\n# Original code:\ntitanic$Embarked[c(62, 830)] &lt;- 'C'\n\n(def titanic\n  (bra&lt;- titanic [62 830] \"Embarked\"\n         \"C\"))\n\nA missing value in fare. Thripathi’s explanation: To know Which passenger has no fare information:\n# Original code:\ntitanic[(which(is.na(titanic$Fare))) , 1]\n\n(-&gt; titanic\n    (bra (-&gt; titanic\n             ($ 'Fare)\n             is-na\n             which)\n         1))\n\n\n[1] 1044\n\n\nTripathi: Looks like Passenger number 1044 has no listed Fare\nWhere did this passenger leave from? What was their class?\n# Original code:\n titanic[1044, c(3, 12)]\n\n(-&gt; titanic\n    (bra 1044 [3 12]))\n\n\n     Pclass Embarked\n1044      3        S\n\n\nTripathi: Another way to know about passenger id 1044 :Show row 1044\n# Original code:\ntitanic[1044, ]\n\n(-&gt; titanic\n    (bra 1044 nil))\n\n\n     PassengerId Survived Pclass               Name  Sex  Age SibSp Parch\n1044        1044       NA      3 Storey, Mr. Thomas male 60.5     0     0\n     Ticket Fare Cabin Embarked title surname famsize   family fsizeD deck\n1044   3701   NA              S    Mr  Storey       1 Storey_1 single &lt;NA&gt;\n\n\nThripathi’s explanation: Looks like he left from ‘S’ (Southampton) as a 3rd class passenger. Let’s see what other people of the same class and embarkment port paid for their tickets.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#feature-enginnering-part-2",
    "href": "clojisr.v1.tutorials.titanic0.html#feature-enginnering-part-2",
    "title": "5  ClojisR example: Titanic #0",
    "section": "6.1 Feature Enginnering: Part 2",
    "text": "6.1 Feature Enginnering: Part 2\nTripathi: I will create a couple of new age-dependent variables: Child and Mother. A child will simply be someone under 18 years of age and a mother is a passenger who is 1) female, 2) is over 18, 3) has more than 0 children and 4) does not have the title ‘Miss’.\nRelationship between age & survival: I include Sex since we know it’s a significant predictor.\n# Original code:\nggplot(titanic[1:891,], aes(Age, fill = factor(Survived))) +\n  geom_histogram() + facet_grid(.~Sex) + theme_few()\n\n(-&gt; titanic\n    (bra (colon 1 891) nil)\n    (ggplot (aes 'Age :fill '(factor Survived)))\n    (r+ (geom_histogram)\n        (facet_grid '(tilde . Sex))\n        (theme_few))\n    plot-&gt;svg)\n\n\n\n\n  \n\n\n\n  \n    \n  \n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\nfemale\n\n\n\n\n  \n    \n  \n\n\n\nmale\n\n\n\n\n\n\n\n0\n20\n40\n60\n80\n\n\n\n\n\n0\n20\n40\n60\n80\n0\n20\n40\n60\n\n\n\n\nAge\ncount\n\nfactor(Survived)\n\n\n\n\n0\n1\n\n\n\nTripathi: Create the column Child, and indicate whether child or adult:\n# Original code:\n titanic$Child[titanic$Age &lt; 18] &lt;- 'Child'\n titanic$Child[titanic$Age &gt;= 18] &lt;- 'Adult'\n\n(def titanic\n  (-&gt; titanic\n      (bra&lt;- (r&lt; ($ titanic 'Age) 18) \"Child\"\n             \"Child\")\n      (bra&lt;- (r&gt;= ($ titanic 'Age) 18) \"Child\"\n             \"Adult\")))\n\nShow counts:\n# Original code:\ntable(titanic$Child, titanic$Survived)\n\n(table ($ titanic 'Child)\n       ($ titanic 'Survived))\n\n\n       \n          0   1\n  Adult 484 273\n  Child  65  69\n\n\nAdding Mother variable:\n# Original code:\ntitanic$Mother &lt;- 'Not Mother'\ntitanic$Mother[titanic$Sex == 'female' & titanic$Parch &gt;0 & titanic$Age &gt; 18 & titanic$title != 'Miss'] &lt;- 'Mother'\n\n(def titanic\n  (-&gt; titanic\n      ($&lt;- 'Mother\n           \"Not Mother\")\n      (bra&lt;- (reduce r&\n                     [(r== ($ titanic 'Sex) \"female\")\n                      (r&gt; ($ titanic 'Parch) 0)\n                      (r&gt; ($ titanic 'Age) 18)\n                      (r!= ($ titanic 'title) \"Miss\")])\n             \"Mother\"\n             \"Mother\")))\n\nShow counts:\n# Original code:\ntable(titanic$Mother, titanic$Survived)\n\n(table ($ titanic 'Mother)\n       ($ titanic 'Survived))\n\n\n            \n               0   1\n  Mother      15  38\n  Not Mother 534 304\n\n\nFactorizing variables:\n# Original code:\ntitanic$Child &lt;- factor(titanic$Child)\ntitanic$Mother &lt;- factor(titanic$Mother)\ntitanic$Pclass &lt;- factor(titanic$Pclass)\ntitanic$Sex &lt;- factor(titanic$Sex)\ntitanic$Embarked &lt;- factor(titanic$Embarked)\ntitanic$Survived &lt;- factor(titanic$Survived)\ntitanic$title &lt;- factor(titanic$title)\ntitanic$fsizeD &lt;- factor(titanic$fsizeD)\n\n(def titanic\n  (reduce (fn [data symbol]\n            ($&lt;- data symbol\n                 (factor ($ data symbol))))\n          titanic\n          '[Child Mother Pclass Sex Embarked Survived title fsizeD]))\n\nCheck classes of all columns:\n\n(lapply titanic (r \"class\"))\n\n\n$PassengerId\n[1] \"integer\"\n\n$Survived\n[1] \"factor\"\n\n$Pclass\n[1] \"factor\"\n\n$Name\n[1] \"character\"\n\n$Sex\n[1] \"factor\"\n\n$Age\n[1] \"numeric\"\n\n$SibSp\n[1] \"integer\"\n\n$Parch\n[1] \"integer\"\n\n$Ticket\n[1] \"character\"\n\n$Fare\n[1] \"numeric\"\n\n$Cabin\n[1] \"character\"\n\n$Embarked\n[1] \"factor\"\n\n$title\n[1] \"factor\"\n\n$surname\n[1] \"character\"\n\n$famsize\n[1] \"integer\"\n\n$family\n[1] \"character\"\n\n$fsizeD\n[1] \"factor\"\n\n$deck\n[1] \"factor\"\n\n$Child\n[1] \"factor\"\n\n$Mother\n[1] \"factor\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#variable-importance",
    "href": "clojisr.v1.tutorials.titanic0.html#variable-importance",
    "title": "5  ClojisR example: Titanic #0",
    "section": "7.1 Variable Importance",
    "text": "7.1 Variable Importance\nGet importance:\n# Original code:\nimportance    &lt;- importance(titanic_model)\nvarImportance &lt;- data.frame(Variables = row.names(importance),\n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n(importance titanic-model)\n\n\n         MeanDecreaseGini\nPclass          29.479780\nSex             61.243379\nAge             46.395186\nSibSp           11.921763\nParch            7.785026\nFare            59.766976\nEmbarked         9.710976\ntitle           65.424749\nfsizeD          17.363445\nChild            4.306876\nMother           2.240933\n\n\n\n(def importance-info\n  (importance titanic-model))\n\n\n(def var-importance\n  (data-frame :Variables (row-names importance-info)\n              :Importance (-&gt; importance-info\n                              (bra nil \"MeanDecreaseGini\")\n                              round)))\n\n\nimportance-info\n\n\n         MeanDecreaseGini\nPclass          29.479780\nSex             61.243379\nAge             46.395186\nSibSp           11.921763\nParch            7.785026\nFare            59.766976\nEmbarked         9.710976\ntitle           65.424749\nfsizeD          17.363445\nChild            4.306876\nMother           2.240933\n\n\n\nvar-importance\n\n\n         Variables Importance\nPclass      Pclass         29\nSex            Sex         61\nAge            Age         46\nSibSp        SibSp         12\nParch        Parch          8\nFare          Fare         60\nEmbarked  Embarked         10\ntitle        title         65\nfsizeD      fsizeD         17\nChild        Child          4\nMother      Mother          2",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#variable-importance-1",
    "href": "clojisr.v1.tutorials.titanic0.html#variable-importance-1",
    "title": "5  ClojisR example: Titanic #0",
    "section": "7.2 Variable importance",
    "text": "7.2 Variable importance\nCreate a rank variable based on importance:\n# Original code:\nrankImportance &lt;- varImportance %&gt;%\n   mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\n(def rank-importance\n  (-&gt; var-importance\n      (mutate :Rank '(paste0 \"#\" (dense_rank (desc Importance))))))\n\n\nrank-importance\n\n\n         Variables Importance Rank\nPclass      Pclass         29   #5\nSex            Sex         61   #2\nAge            Age         46   #4\nSibSp        SibSp         12   #7\nParch        Parch          8   #9\nFare          Fare         60   #3\nEmbarked  Embarked         10   #8\ntitle        title         65   #1\nfsizeD      fsizeD         17   #6\nChild        Child          4  #10\nMother      Mother          2  #11\n\n\nTripathi: Use ggplot2 to visualize the relative importance of variables\n# Original code:\nggplot(rankImportance, aes(x = reorder(Variables, Importance),\n                           y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') +\n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n            hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip() +\n  theme_few()\n\n(-&gt; rank-importance\n    (ggplot (aes :x '(reorder Variables Importance)\n                 :y 'Importance\n                 :fill 'Importance))\n    (r+ (geom_bar :stat \"Identity\")\n        (geom_text (aes :x 'Variables\n                        :y 0.5\n                        :label 'Rank)\n                   :hjust 0\n                   :vjust 0.55\n                   :size 4\n                   :colour \"red\")\n        (labs :x \"Variables\")\n        (coord_flip)\n        (theme_few))\n    plot-&gt;svg)\n\n\n\n\n  \n\n\n\n  \n    \n  \n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#5\n#2\n#4\n#7\n#9\n#3\n#8\n#1\n#6\n#10\n#11\n\n\n\nMother\nChild\nParch\nEmbarked\nSibSp\nfsizeD\nPclass\nAge\nFare\nSex\ntitle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n20\n40\n60\nImportance\nVariables\n\n\n20\n40\n60\nImportance\n\n\n\n\n\n\n\n\n\nTripathi: From the plot we can see that the ‘title’ variable has the highest relative importance out of all of our predictor variables.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#final-prediction",
    "href": "clojisr.v1.tutorials.titanic0.html#final-prediction",
    "title": "5  ClojisR example: Titanic #0",
    "section": "7.3 Final Prediction",
    "text": "7.3 Final Prediction\nPredict using the test set:\n# Original code:\nprediction &lt;- predict(titanic_model, test)\nprediction\n\n(def prediction\n  (predict titanic-model test))\n\nTripathi: Save the solution to a dataframe with two columns: PassengerId and Survived (prediction).\n# Original code:\nOutput&lt;- data.frame(PassengerID = test$PassengerId, Survived = prediction)\nOutput\n\n(def output (data-frame :PassengerId ($ test 'PassengerId)\n                        :Survived prediction))\n\n\n(r-&gt;clj output)\n\n\n_unnamed [418 3]:\n\n\n\n:$row.names\n:PassengerId\n:Survived\n\n\n\n\n892\n892\n:0\n\n\n893\n893\n:0\n\n\n894\n894\n:0\n\n\n895\n895\n:0\n\n\n896\n896\n:0\n\n\n897\n897\n:0\n\n\n898\n898\n:1\n\n\n899\n899\n:0\n\n\n900\n900\n:1\n\n\n901\n901\n:0\n\n\n…\n…\n…\n\n\n1299\n1299\n:0\n\n\n1300\n1300\n:1\n\n\n1301\n1301\n:1\n\n\n1302\n1302\n:1\n\n\n1303\n1303\n:1\n\n\n1304\n1304\n:0\n\n\n1305\n1305\n:0\n\n\n1306\n1306\n:1\n\n\n1307\n1307\n:0\n\n\n1308\n1308\n:0\n\n\n1309\n1309\n:1\n\n\n\n\nWrite the Output to file:\n# Original code:\nwrite.csv(Output, file = 'pradeep_titanic_output.csv', row.names = F)\n\n(write-csv output\n           :file \"/tmp/pradeep_titanic_output.csv\"\n           :row.names 'F)\n\n\nNULL",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  },
  {
    "objectID": "clojisr.v1.tutorials.titanic0.html#conclusion",
    "href": "clojisr.v1.tutorials.titanic0.html#conclusion",
    "title": "5  ClojisR example: Titanic #0",
    "section": "7.4 Conclusion",
    "text": "7.4 Conclusion\nTripathi: Thank you for taking the time to read through my first exploration of a Titanic Kaggle dataset. Again, this newbie welcomes comments and suggestions!\n\nsource: notebooks/clojisr/v1/tutorials/titanic0.clj",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ClojisR example: Titanic #0</span>"
    ]
  }
]